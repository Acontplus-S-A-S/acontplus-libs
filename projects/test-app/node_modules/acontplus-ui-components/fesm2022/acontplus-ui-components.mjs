import * as i0 from '@angular/core';
import { input, Component, output, ViewChild, inject, Injectable, InjectionToken, signal, Pipe, ViewContainerRef, Injector, EventEmitter, Input, ContentChildren, ContentChild, Output, ChangeDetectionStrategy } from '@angular/core';
import { MatDialogContent, MatDialogTitle, MatDialogActions, MatDialog, MatDialogConfig } from '@angular/material/dialog';
import * as i4 from '@angular/material/icon';
import { MatIcon, MatIconModule } from '@angular/material/icon';
import { MatProgressSpinner } from '@angular/material/progress-spinner';
import { CdkDrag, CdkDragHandle } from '@angular/cdk/drag-drop';
import * as i5 from '@angular/material/button';
import { MatButton, MatMiniFabButton, MatIconButton, MatFabButton, MatButtonModule } from '@angular/material/button';
import { NgClass, DatePipe, DecimalPipe, NgTemplateOutlet, NgComponentOutlet, AsyncPipe } from '@angular/common';
import { MatChipRow, MatChipGrid, MatChipInput } from '@angular/material/chips';
import { MatFormField, MatLabel, MatHint } from '@angular/material/form-field';
import { LiveAnnouncer } from '@angular/cdk/a11y';
import { ENTER, COMMA } from '@angular/cdk/keycodes';
import * as i1 from '@angular/cdk/overlay';
import { Overlay } from '@angular/cdk/overlay';
import { map, BehaviorSubject } from 'rxjs';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { ComponentPortal } from '@angular/cdk/portal';
import { MatSnackBar } from '@angular/material/snack-bar';
import * as i1$1 from '@angular/material/card';
import { MatCardModule } from '@angular/material/card';
import { MatFormField as MatFormField$1, MatInput, MatLabel as MatLabel$1 } from '@angular/material/input';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { MatOption } from '@angular/material/core';
import { MatSelect } from '@angular/material/select';
import * as i1$2 from '@angular/material/table';
import { MatTableDataSource, MatTableModule, MatTable, MatNoDataRow, MatHeaderRowDef, MatRowDef, MatFooterRowDef, MatColumnDef } from '@angular/material/table';
import { SelectionModel } from '@angular/cdk/collections';
import * as i6 from '@angular/material/paginator';
import { MatPaginatorModule } from '@angular/material/paginator';
import { trigger, state, transition, style, animate } from '@angular/animations';
import * as i2$1 from '@angular/material/checkbox';
import { MatCheckboxModule } from '@angular/material/checkbox';
import * as i3 from '@angular/material/sort';
import { MatSortModule } from '@angular/material/sort';
import { HttpContextToken, HttpContext } from '@angular/common/http';
import { finalize } from 'rxjs/operators';

const SNACKBAR_MESSAGES = {
    SUCCESS: {
        SAVE: 'Data saved successfully',
        DELETE: 'Item deleted successfully',
        UPDATE: 'Data updated successfully',
        UPLOAD: 'File uploaded successfully',
    },
    ERROR: {
        SAVE: 'Failed to save data',
        DELETE: 'Failed to delete item',
        UPDATE: 'Failed to update data',
        UPLOAD: 'Failed to upload file',
        NETWORK: 'Network error occurred',
        UNKNOWN: 'An unexpected error occurred',
    },
    WARNING: {
        UNSAVED_CHANGES: 'You have unsaved changes',
        SESSION_EXPIRING: 'Your session is about to expire',
        STORAGE_FULL: 'Storage is running low',
    },
    INFO: {
        LOADING: 'Loading data...',
        PROCESSING: 'Processing request...',
        MAINTENANCE: 'System maintenance scheduled',
    },
};
const SNACKBAR_DURATIONS = {
    SHORT: 3000,
    MEDIUM: 5000,
    LONG: 8000,
    PERSISTENT: 0,
};
const SNACKBAR_ICONS = {
    success: 'check_circle',
    error: 'error',
    warning: 'warning',
    info: 'info',
};

class IconUserComponent {
    constructor() {
        this.size = input('35');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: IconUserComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "20.0.3", type: IconUserComponent, isStandalone: true, selector: "acp-icon-user", inputs: { size: { classPropertyName: "size", publicName: "size", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: "<svg\r\n  [attr.width]=\"size()\"\r\n  [attr.height]=\"size()\"\r\n  version=\"1.1\"\r\n  id=\"Capa_1\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n  viewBox=\"0 0 480 480\"\r\n  xml:space=\"preserve\"\r\n  fill=\"#000000\"\r\n>\r\n  <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\r\n  <g\r\n    id=\"SVGRepo_tracerCarrier\"\r\n    stroke-linecap=\"round\"\r\n    stroke-linejoin=\"round\"\r\n  ></g>\r\n  <g id=\"SVGRepo_iconCarrier\">\r\n    <g>\r\n      <g>\r\n        <circle style=\"fill: #b8bac0\" cx=\"240\" cy=\"240\" r=\"240\"></circle>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #ffffff\"\r\n            d=\"M240,360.07c-27.944,0-53.297-11.991-72.003-31.372c-0.014,11.615-0.436,28.379-3.516,40.611 c2.02,1.235,3.588,3.262,3.894,5.784c3.992,32.484,34.781,56.977,71.625,56.977c36.836,0,67.625-24.496,71.625-56.977 c0.31-2.525,1.844-4.549,3.895-5.78c-3.08-12.233-3.503-28.999-3.517-40.615C293.297,348.079,267.944,360.07,240,360.07z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #d7dbe0\"\r\n            d=\"M310.44,330.174c-18.549,18.477-43.242,29.896-70.44,29.896 c-27.944,0-53.297-11.991-72.003-31.372c-0.014,11.615-0.436,28.379-3.516,40.611c2.02,1.235,3.588,3.262,3.894,5.784 c1.765,14.359,8.778,27.144,19.223,36.954C235.766,405.265,290.437,357.702,310.44,330.174z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #ffffff\"\r\n            d=\"M312,160.07H176c-22.055,0-40,17.945-40,40v48c0,61.758,46.656,112,104,112s104-50.242,104-112 v-56C344,174.426,329.648,160.07,312,160.07z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #5c546a\"\r\n            d=\"M296,72.07H192c-15.047,0-27.695,10.438-31.102,24.449C133.359,100.02,112,123.598,112,152.07v40 c0,20.617,8.752,39.851,24,53.52v-45.52c0-22.055,17.945-40,40-40h136c17.648,0,32,14.355,32,32v53.511 c15.251-13.667,24-32.899,24-53.511v-48C368,104.371,335.703,72.07,296,72.07z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <path\r\n          style=\"fill: #5c546a\"\r\n          d=\"M61.632,400.544C105.562,449.319,169.191,480,240,480s134.438-30.681,178.368-79.456 c-7.66-10.356-18.462-18.77-32.352-22.659c-0.32-0.09-0.641-0.16-0.969-0.207l-63.859-9.582c-0.391-0.059-1.227-0.09-1.625-0.09 c-4.039,0-7.445,3.012-7.938,7.023c-4,32.48-34.789,56.977-71.625,56.977c-36.844,0-67.633-24.492-71.625-56.977 c-0.5-4.129-4.219-7.234-8.141-7.02c-0.469-0.027-0.93,0.012-1.422,0.086l-63.859,9.582c-0.328,0.047-0.648,0.117-0.969,0.207 C80.094,381.775,69.292,390.188,61.632,400.544z\"\r\n        ></path>\r\n      </g>\r\n    </g>\r\n  </g>\r\n</svg>\r\n", styles: [""] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: IconUserComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-icon-user', imports: [], template: "<svg\r\n  [attr.width]=\"size()\"\r\n  [attr.height]=\"size()\"\r\n  version=\"1.1\"\r\n  id=\"Capa_1\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n  viewBox=\"0 0 480 480\"\r\n  xml:space=\"preserve\"\r\n  fill=\"#000000\"\r\n>\r\n  <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\r\n  <g\r\n    id=\"SVGRepo_tracerCarrier\"\r\n    stroke-linecap=\"round\"\r\n    stroke-linejoin=\"round\"\r\n  ></g>\r\n  <g id=\"SVGRepo_iconCarrier\">\r\n    <g>\r\n      <g>\r\n        <circle style=\"fill: #b8bac0\" cx=\"240\" cy=\"240\" r=\"240\"></circle>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #ffffff\"\r\n            d=\"M240,360.07c-27.944,0-53.297-11.991-72.003-31.372c-0.014,11.615-0.436,28.379-3.516,40.611 c2.02,1.235,3.588,3.262,3.894,5.784c3.992,32.484,34.781,56.977,71.625,56.977c36.836,0,67.625-24.496,71.625-56.977 c0.31-2.525,1.844-4.549,3.895-5.78c-3.08-12.233-3.503-28.999-3.517-40.615C293.297,348.079,267.944,360.07,240,360.07z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #d7dbe0\"\r\n            d=\"M310.44,330.174c-18.549,18.477-43.242,29.896-70.44,29.896 c-27.944,0-53.297-11.991-72.003-31.372c-0.014,11.615-0.436,28.379-3.516,40.611c2.02,1.235,3.588,3.262,3.894,5.784 c1.765,14.359,8.778,27.144,19.223,36.954C235.766,405.265,290.437,357.702,310.44,330.174z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #ffffff\"\r\n            d=\"M312,160.07H176c-22.055,0-40,17.945-40,40v48c0,61.758,46.656,112,104,112s104-50.242,104-112 v-56C344,174.426,329.648,160.07,312,160.07z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <g>\r\n          <path\r\n            style=\"fill: #5c546a\"\r\n            d=\"M296,72.07H192c-15.047,0-27.695,10.438-31.102,24.449C133.359,100.02,112,123.598,112,152.07v40 c0,20.617,8.752,39.851,24,53.52v-45.52c0-22.055,17.945-40,40-40h136c17.648,0,32,14.355,32,32v53.511 c15.251-13.667,24-32.899,24-53.511v-48C368,104.371,335.703,72.07,296,72.07z\"\r\n          ></path>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <path\r\n          style=\"fill: #5c546a\"\r\n          d=\"M61.632,400.544C105.562,449.319,169.191,480,240,480s134.438-30.681,178.368-79.456 c-7.66-10.356-18.462-18.77-32.352-22.659c-0.32-0.09-0.641-0.16-0.969-0.207l-63.859-9.582c-0.391-0.059-1.227-0.09-1.625-0.09 c-4.039,0-7.445,3.012-7.938,7.023c-4,32.48-34.789,56.977-71.625,56.977c-36.844,0-67.633-24.492-71.625-56.977 c-0.5-4.129-4.219-7.234-8.141-7.02c-0.469-0.027-0.93,0.012-1.422,0.086l-63.859,9.582c-0.328,0.047-0.648,0.117-0.969,0.207 C80.094,381.775,69.292,390.188,61.632,400.544z\"\r\n        ></path>\r\n      </g>\r\n    </g>\r\n  </g>\r\n</svg>\r\n" }]
        }] });

class SvgIconComponent {
    constructor() {
        this.id = input('');
        this.width = input('40px');
        this.height = input('40px');
        this.color = input('#414141');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SvgIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "20.0.3", type: SvgIconComponent, isStandalone: true, selector: "acp-svg-icon", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, width: { classPropertyName: "width", publicName: "width", isSignal: true, isRequired: false, transformFunction: null }, height: { classPropertyName: "height", publicName: "height", isSignal: true, isRequired: false, transformFunction: null }, color: { classPropertyName: "color", publicName: "color", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: "<svg [attr.width]=\"width()\" [attr.height]=\"height()\" [style.color]=\"color()\">\n  <use [attr.xlink:href]=\"'./svg-sprite.svg#' + id()\"></use>\n</svg>\n", styles: [""] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SvgIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-svg-icon', imports: [], template: "<svg [attr.width]=\"width()\" [attr.height]=\"height()\" [style.color]=\"color()\">\n  <use [attr.xlink:href]=\"'./svg-sprite.svg#' + id()\"></use>\n</svg>\n" }]
        }] });

class MatThemeButtonComponent {
    constructor() {
        this.variant = input('primary');
        this.text = input('');
        this.icon = input('');
        this.outlined = input(false);
        this.disabled = input(false);
        this.useThemeColor = input(false); // Use theme color based on variant
        this.type = input('button');
        this.matStyle = input('raised');
        // Additional common button properties
        this.title = input(''); // Tooltip text shown on hover
        this.ariaLabel = input(''); // Accessibility label
        this.name = input(''); // Name attribute for form submission
        this.id = input(''); // ID for element reference
        this.form = input(''); // Associated form ID
        this.tabIndex = input(0); // Tab order
        this.testId = input(''); // For testing purposes
        this.handleClick = output();
    }
    getButtonClasses() {
        return {
            [`btn-${this.variant()}`]: true,
            'btn-outlined': this.outlined() && this.matStyle() !== 'stroked', // Stroked buttons are already outlined
        };
    }
    getThemeColor() {
        if (!this.useThemeColor)
            return null;
        switch (this.variant()) {
            case 'primary':
                return 'primary';
            case 'secondary':
                return 'accent';
            case 'danger':
                return 'warn';
            default:
                return null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatThemeButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.0.3", type: MatThemeButtonComponent, isStandalone: true, selector: "acp-mat-theme-button", inputs: { variant: { classPropertyName: "variant", publicName: "variant", isSignal: true, isRequired: false, transformFunction: null }, text: { classPropertyName: "text", publicName: "text", isSignal: true, isRequired: false, transformFunction: null }, icon: { classPropertyName: "icon", publicName: "icon", isSignal: true, isRequired: false, transformFunction: null }, outlined: { classPropertyName: "outlined", publicName: "outlined", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null }, useThemeColor: { classPropertyName: "useThemeColor", publicName: "useThemeColor", isSignal: true, isRequired: false, transformFunction: null }, type: { classPropertyName: "type", publicName: "type", isSignal: true, isRequired: false, transformFunction: null }, matStyle: { classPropertyName: "matStyle", publicName: "matStyle", isSignal: true, isRequired: false, transformFunction: null }, title: { classPropertyName: "title", publicName: "title", isSignal: true, isRequired: false, transformFunction: null }, ariaLabel: { classPropertyName: "ariaLabel", publicName: "ariaLabel", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, form: { classPropertyName: "form", publicName: "form", isSignal: true, isRequired: false, transformFunction: null }, tabIndex: { classPropertyName: "tabIndex", publicName: "tabIndex", isSignal: true, isRequired: false, transformFunction: null }, testId: { classPropertyName: "testId", publicName: "testId", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { handleClick: "handleClick" }, ngImport: i0, template: "@if (matStyle() === \"basic\") {\r\n  <button\r\n    mat-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"raised\") {\r\n  <button\r\n    mat-raised-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    <ng-content select=\"svgIcon\"></ng-content>\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"flat\") {\r\n  <button\r\n    mat-flat-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"stroked\") {\r\n  <button\r\n    mat-stroked-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"icon\") {\r\n  <button\r\n    mat-icon-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"fab\") {\r\n  <button\r\n    mat-fab\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"mini-fab\") {\r\n  <button\r\n    mat-mini-fab\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else {\r\n  <button\r\n    mat-raised-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    <ng-content select=\"svgIcon\"></ng-content>\r\n\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n}\r\n", styles: [""], dependencies: [{ kind: "component", type: MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: MatMiniFabButton, selector: "button[mat-mini-fab], a[mat-mini-fab], button[matMiniFab], a[matMiniFab]", exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: MatFabButton, selector: "button[mat-fab], a[mat-fab], button[matFab], a[matFab]", inputs: ["extended"], exportAs: ["matButton", "matAnchor"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatThemeButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-mat-theme-button', imports: [
                        MatButton,
                        NgClass,
                        MatIcon,
                        MatMiniFabButton,
                        MatIconButton,
                        MatFabButton,
                    ], template: "@if (matStyle() === \"basic\") {\r\n  <button\r\n    mat-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"raised\") {\r\n  <button\r\n    mat-raised-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    <ng-content select=\"svgIcon\"></ng-content>\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"flat\") {\r\n  <button\r\n    mat-flat-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"stroked\") {\r\n  <button\r\n    mat-stroked-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"icon\") {\r\n  <button\r\n    mat-icon-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"fab\") {\r\n  <button\r\n    mat-fab\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else if (matStyle() === \"mini-fab\") {\r\n  <button\r\n    mat-mini-fab\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    @if (icon()) {\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n} @else {\r\n  <button\r\n    mat-raised-button\r\n    [ngClass]=\"getButtonClasses()\"\r\n    [disabled]=\"disabled()\"\r\n    [color]=\"getThemeColor()\"\r\n    [type]=\"type()\"\r\n    [title]=\"title()\"\r\n    [attr.aria-label]=\"ariaLabel() || title()\"\r\n    [attr.name]=\"name()\"\r\n    [attr.id]=\"id()\"\r\n    [attr.form]=\"form()\"\r\n    [attr.tabindex]=\"tabIndex()\"\r\n    [attr.data-testid]=\"testId()\"\r\n    (click)=\"handleClick.emit($event)\"\r\n  >\r\n    <ng-content select=\"svgIcon\"></ng-content>\r\n\r\n    @if (icon()) {\r\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\r\n    }\r\n    @if (text()) {\r\n      <span class=\"button-text\">{{ text() }}</span>\r\n    }\r\n    <ng-content></ng-content>\r\n  </button>\r\n}\r\n" }]
        }] });

class MatCustomDialogComponent {
    constructor() {
        this.showHeader = input(true);
        this.loading = input(false);
        this.align = input('end');
        this.title = input('');
        this.icon = input('');
        this.options = input({
            showButtonClose: true,
        });
        this.close = output();
    }
    static { this.lastZIndex = 1000; }
    toTop() {
        const pane = this.header.nativeElement.closest('.cdk-overlay-pane');
        if (pane) {
            pane.style.zIndex = (++MatCustomDialogComponent.lastZIndex).toString();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatCustomDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.0.3", type: MatCustomDialogComponent, isStandalone: true, selector: "acp-mat-custom-dialog", inputs: { showHeader: { classPropertyName: "showHeader", publicName: "showHeader", isSignal: true, isRequired: false, transformFunction: null }, loading: { classPropertyName: "loading", publicName: "loading", isSignal: true, isRequired: false, transformFunction: null }, align: { classPropertyName: "align", publicName: "align", isSignal: true, isRequired: false, transformFunction: null }, title: { classPropertyName: "title", publicName: "title", isSignal: true, isRequired: false, transformFunction: null }, icon: { classPropertyName: "icon", publicName: "icon", isSignal: true, isRequired: false, transformFunction: null }, options: { classPropertyName: "options", publicName: "options", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { close: "close" }, viewQueries: [{ propertyName: "header", first: true, predicate: ["dialogHeader"], descendants: true, static: true }], ngImport: i0, template: "@if (showHeader()) {\n  <div class=\"m3-dialog-header\">\n    <h6\n      mat-dialog-title\n      cdkDrag\n      cdkDragRootElement=\".cdk-overlay-pane\"\n      cdkDragHandle\n      #dialogHeader\n      (mousedown)=\"toTop()\"\n    >\n      @if (icon()) {\n        <mat-icon\n          aria-hidden=\"false\"\n          aria-label=\"Dialog Icon\"\n          fontIcon=\"{{ icon() }}\"\n        ></mat-icon>\n      }\n\n      {{ title() }}\n\n      <button\n        type=\"button\"\n        mat-icon-button\n        class=\"close-button\"\n        (click)=\"close.emit()\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n    </h6>\n  </div>\n}\n\n<mat-dialog-content class=\"mat-typography\">\n  @if (loading()) {\n    <div class=\"loading-overlay\">\n      <mat-spinner></mat-spinner>\n    </div>\n  }\n  <ng-content />\n</mat-dialog-content>\n<mat-dialog-actions [align]=\"align()\">\n  <ng-content />\n  @if (this.options().showButtonClose) {\n    <acp-mat-theme-button\n      variant=\"dark\"\n      icon=\"close\"\n      ariaLabel=\"Close Dialog Button\"\n      text=\"Cerrar\"\n      matStyle=\"raised\"\n      (handleClick)=\"close.emit()\"\n    />\n  }\n</mat-dialog-actions>\n", styles: [".m3-dialog-header{cursor:all-scroll}h6[mat-dialog-title]{display:flex;justify-content:space-between;align-items:center;font-size:20px}.close-button{margin-left:auto}.loading-overlay{position:absolute;inset:0;display:flex;justify-content:center;align-items:center;background-color:#ffffffb3;z-index:10}\n"], dependencies: [{ kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "component", type: MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "directive", type: MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { kind: "directive", type: MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "component", type: MatThemeButtonComponent, selector: "acp-mat-theme-button", inputs: ["variant", "text", "icon", "outlined", "disabled", "useThemeColor", "type", "matStyle", "title", "ariaLabel", "name", "id", "form", "tabIndex", "testId"], outputs: ["handleClick"] }, { kind: "component", type: MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatCustomDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-mat-custom-dialog', imports: [
                        MatIcon,
                        MatDialogContent,
                        MatProgressSpinner,
                        MatDialogTitle,
                        CdkDrag,
                        CdkDragHandle,
                        MatDialogActions,
                        MatThemeButtonComponent,
                        MatIconButton,
                    ], template: "@if (showHeader()) {\n  <div class=\"m3-dialog-header\">\n    <h6\n      mat-dialog-title\n      cdkDrag\n      cdkDragRootElement=\".cdk-overlay-pane\"\n      cdkDragHandle\n      #dialogHeader\n      (mousedown)=\"toTop()\"\n    >\n      @if (icon()) {\n        <mat-icon\n          aria-hidden=\"false\"\n          aria-label=\"Dialog Icon\"\n          fontIcon=\"{{ icon() }}\"\n        ></mat-icon>\n      }\n\n      {{ title() }}\n\n      <button\n        type=\"button\"\n        mat-icon-button\n        class=\"close-button\"\n        (click)=\"close.emit()\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n    </h6>\n  </div>\n}\n\n<mat-dialog-content class=\"mat-typography\">\n  @if (loading()) {\n    <div class=\"loading-overlay\">\n      <mat-spinner></mat-spinner>\n    </div>\n  }\n  <ng-content />\n</mat-dialog-content>\n<mat-dialog-actions [align]=\"align()\">\n  <ng-content />\n  @if (this.options().showButtonClose) {\n    <acp-mat-theme-button\n      variant=\"dark\"\n      icon=\"close\"\n      ariaLabel=\"Close Dialog Button\"\n      text=\"Cerrar\"\n      matStyle=\"raised\"\n      (handleClick)=\"close.emit()\"\n    />\n  }\n</mat-dialog-actions>\n", styles: [".m3-dialog-header{cursor:all-scroll}h6[mat-dialog-title]{display:flex;justify-content:space-between;align-items:center;font-size:20px}.close-button{margin-left:auto}.loading-overlay{position:absolute;inset:0;display:flex;justify-content:center;align-items:center;background-color:#ffffffb3;z-index:10}\n"] }]
        }], propDecorators: { header: [{
                type: ViewChild,
                args: ['dialogHeader', { static: true }]
            }] } });

class MatInputChipComponent {
    constructor() {
        this.chips = input.required();
        this.labelText = input.required();
        this.placelholder = input('');
        this.addOnBlur = true;
        this.separatorKeysCodes = [ENTER, COMMA];
        this.announcer = inject(LiveAnnouncer);
    }
    add(event) {
        const value = (event.value || '').trim();
        // Add our fruit
        if (value) {
            this.chips().push(value);
        }
        // Clear the input value
        event.chipInput.clear();
    }
    remove(value) {
        const index = this.chips().indexOf(value);
        if (index >= 0) {
            this.chips().splice(index, 1);
            this.announcer.announce(`Removed ${value}`);
        }
    }
    edit(inputRaw, event) {
        const value = event.value.trim();
        // Remove fruit if it no longer has a name
        if (!value) {
            this.remove(inputRaw);
            return;
        }
        // Edit existing fruit
        const index = this.chips().indexOf(inputRaw);
        if (index >= 0) {
            this.chips()[index] = value.replace(/\s+/g, '');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatInputChipComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.0.3", type: MatInputChipComponent, isStandalone: true, selector: "acp-mat-input-chip", inputs: { chips: { classPropertyName: "chips", publicName: "chips", isSignal: true, isRequired: true, transformFunction: null }, labelText: { classPropertyName: "labelText", publicName: "labelText", isSignal: true, isRequired: true, transformFunction: null }, placelholder: { classPropertyName: "placelholder", publicName: "placelholder", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: "<mat-form-field class=\"w-100\" appearance=\"outline\">\r\n  <mat-label>{{ labelText() }}</mat-label>\r\n  <mat-chip-grid #chipGrid aria-label=\"Enter fruits\">\r\n    @for (chip of chips(); track $index) {\r\n      <mat-chip-row\r\n        (removed)=\"remove(chip)\"\r\n        [editable]=\"true\"\r\n        (edited)=\"edit(chip, $event)\"\r\n        [aria-description]=\"'press enter to edit ' + chip\"\r\n      >\r\n        {{ chip }}\r\n        <button matChipRemove [attr.aria-label]=\"'remove ' + chip\">\r\n          <mat-icon>cancel</mat-icon>\r\n        </button>\r\n      </mat-chip-row>\r\n    }\r\n    <input\r\n      [placeholder]=\"placelholder()\"\r\n      [matChipInputFor]=\"chipGrid\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      [matChipInputAddOnBlur]=\"addOnBlur\"\r\n      (matChipInputTokenEnd)=\"add($event)\"\r\n    />\r\n  </mat-chip-grid>\r\n  <mat-hint align=\"start\"\r\n    ><strong>Ingrese {{ labelText() }} y dale \"Enter\"</strong>\r\n  </mat-hint>\r\n</mat-form-field>\r\n", styles: [""], dependencies: [{ kind: "component", type: MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: MatLabel, selector: "mat-label" }, { kind: "component", type: MatChipRow, selector: "mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]", inputs: ["editable"], outputs: ["edited"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "component", type: MatChipGrid, selector: "mat-chip-grid", inputs: ["disabled", "placeholder", "required", "value", "errorStateMatcher"], outputs: ["change", "valueChange"] }, { kind: "directive", type: MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled", "readonly", "matChipInputDisabledInteractive"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatInputChipComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-mat-input-chip', imports: [MatFormField, MatLabel, MatChipRow, MatIcon, MatHint, MatChipGrid, MatChipInput], template: "<mat-form-field class=\"w-100\" appearance=\"outline\">\r\n  <mat-label>{{ labelText() }}</mat-label>\r\n  <mat-chip-grid #chipGrid aria-label=\"Enter fruits\">\r\n    @for (chip of chips(); track $index) {\r\n      <mat-chip-row\r\n        (removed)=\"remove(chip)\"\r\n        [editable]=\"true\"\r\n        (edited)=\"edit(chip, $event)\"\r\n        [aria-description]=\"'press enter to edit ' + chip\"\r\n      >\r\n        {{ chip }}\r\n        <button matChipRemove [attr.aria-label]=\"'remove ' + chip\">\r\n          <mat-icon>cancel</mat-icon>\r\n        </button>\r\n      </mat-chip-row>\r\n    }\r\n    <input\r\n      [placeholder]=\"placelholder()\"\r\n      [matChipInputFor]=\"chipGrid\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      [matChipInputAddOnBlur]=\"addOnBlur\"\r\n      (matChipInputTokenEnd)=\"add($event)\"\r\n    />\r\n  </mat-chip-grid>\r\n  <mat-hint align=\"start\"\r\n    ><strong>Ingrese {{ labelText() }} y dale \"Enter\"</strong>\r\n  </mat-hint>\r\n</mat-form-field>\r\n" }]
        }] });

class SpinnerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SpinnerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: SpinnerComponent, isStandalone: true, selector: "acp-spinner", ngImport: i0, template: "<mat-spinner></mat-spinner>\r\n", styles: [":host{display:flex;justify-content:center;align-items:center;height:100%}\n"], dependencies: [{ kind: "component", type: MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SpinnerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-spinner', imports: [MatProgressSpinner], template: "<mat-spinner></mat-spinner>\r\n", styles: [":host{display:flex;justify-content:center;align-items:center;height:100%}\n"] }]
        }] });

class DialogService {
    constructor() {
        this.dialog = inject(MatDialog);
        this.overlay = inject(Overlay);
        this.breakpointObserver = inject(BreakpointObserver);
        // Check if device is mobile
        this.isMobile$ = this.breakpointObserver
            .observe([Breakpoints.Handset])
            .pipe(map((result) => result.matches));
    }
    /**
     * Opens a dialog with the specified component and configuration
     */
    open(component, config = {}) {
        const dialogConfig = this.buildDialogConfig(config);
        return this.dialog.open(component, dialogConfig);
    }
    /**
     * Opens a dialog and returns only the result observable
     */
    openAndGetResult(component, config = {}) {
        return this.open(component, config).afterClosed();
    }
    /**
     * Opens a confirmation dialog (helper method)
     */
    openConfirmation(component, data, config = {}) {
        const confirmConfig = {
            size: 'sm',
            backdropClickClosable: false,
            escapeKeyClosable: false,
            autoFocus: 'dialog',
            role: 'alertdialog',
            ...config,
            data,
        };
        return this.openAndGetResult(component, confirmConfig).pipe(map((result) => Boolean(result)));
    }
    /**
     * Closes all open dialogs
     */
    closeAll() {
        this.dialog.closeAll();
    }
    /**
     * Gets all open dialogs
     */
    getOpenDialogs() {
        return this.dialog.openDialogs;
    }
    buildDialogConfig(config) {
        const dialogConfig = new MatDialogConfig();
        // Handle full screen mode
        if (config.size === 'full') {
            this.applyFullScreenConfig(dialogConfig);
        }
        else {
            this.applyStandardConfig(dialogConfig, config);
        }
        // Apply common configurations
        this.applyCommonConfig(dialogConfig, config);
        return dialogConfig;
    }
    applyFullScreenConfig(dialogConfig) {
        dialogConfig.width = '100vw';
        dialogConfig.height = '100vh';
        dialogConfig.maxWidth = '100vw';
        dialogConfig.maxHeight = '100vh';
        dialogConfig.panelClass = ['full-screen-dialog'];
        dialogConfig.position = {
            top: '0',
            left: '0',
        };
    }
    applyStandardConfig(dialogConfig, config) {
        // Set dimensions
        dialogConfig.width = config.width || this.getDialogWidth(config.size);
        dialogConfig.height = config.height || 'auto';
        dialogConfig.minWidth = config.minWidth;
        dialogConfig.minHeight = config.minHeight;
        dialogConfig.maxWidth = config.maxWidth || '95vw';
        dialogConfig.maxHeight = config.maxHeight || '90vh';
        // Handle mobile full screen option
        if (config.isMobileFullScreen) {
            this.isMobile$.subscribe((isMobile) => {
                if (isMobile) {
                    this.applyFullScreenConfig(dialogConfig);
                }
            });
        }
        // Set position
        if (config.position) {
            dialogConfig.position = config.position;
        }
    }
    applyCommonConfig(dialogConfig, config) {
        // Data
        dialogConfig.data = config.data;
        // Backdrop
        dialogConfig.hasBackdrop = config.hasBackdrop ?? true;
        dialogConfig.backdropClass = config.backdropClass;
        // Panel styling
        const panelClasses = Array.isArray(config.panelClass)
            ? config.panelClass
            : config.panelClass
                ? [config.panelClass]
                : [];
        // Add responsive class based on size
        if (config.size) {
            panelClasses.push(`dialog-${config.size}`);
        }
        dialogConfig.panelClass = panelClasses;
        // Behavior
        dialogConfig.disableClose =
            !(config.backdropClickClosable ?? true) ||
                !(config.escapeKeyClosable ?? true);
        // Focus management
        dialogConfig.autoFocus = config.autoFocus ?? 'first-tabbable';
        dialogConfig.restoreFocus = config.restoreFocus ?? true;
        // Scroll strategy
        dialogConfig.scrollStrategy =
            config.scrollStrategy || this.overlay.scrollStrategies.block();
        // Animation
        dialogConfig.enterAnimationDuration =
            config.enterAnimationDuration ?? '300ms';
        dialogConfig.exitAnimationDuration =
            config.exitAnimationDuration ?? '200ms';
        // Accessibility
        if (config.ariaLabel) {
            dialogConfig.ariaLabel = config.ariaLabel;
        }
        if (config.ariaLabelledBy) {
            dialogConfig.ariaLabelledBy = config.ariaLabelledBy;
        }
        if (config.ariaDescribedBy) {
            dialogConfig.ariaDescribedBy = config.ariaDescribedBy;
        }
        if (config.role) {
            dialogConfig.role = config.role;
        }
    }
    getDialogWidth(size = 'md') {
        const sizeMap = {
            xs: '280px',
            sm: '400px',
            md: '600px',
            lg: '800px',
            xl: '1200px',
            xxl: '1400px',
            full: '100vw',
        };
        return sizeMap[size];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: DialogService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: DialogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: DialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class OverlayService {
    constructor(overlay) {
        this.overlay = overlay;
    }
    showSpinner() {
        if (!this.overlayRef) {
            this.overlayRef = this.overlay.create({
                hasBackdrop: true,
                positionStrategy: this.overlay
                    .position()
                    .global()
                    .centerHorizontally()
                    .centerVertically(),
            });
            const spinnerPortal = new ComponentPortal(SpinnerComponent);
            this.overlayRef.attach(spinnerPortal);
        }
    }
    hideSpinner() {
        if (this.overlayRef) {
            this.overlayRef.detach();
            this.overlayRef = null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: OverlayService, deps: [{ token: i1.Overlay }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: OverlayService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: OverlayService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.Overlay }] });

const DEFAULT_SNACKBAR_CONFIG = {
    duration: 5000,
    horizontalPosition: 'center',
    verticalPosition: 'bottom',
    panelClass: [],
    defaultAction: 'Close',
    iconEnabled: true,
    titleEnabled: true,
};
const SNACKBAR_CONFIG = new InjectionToken('acontplus-snackbar-config', {
    providedIn: 'root',
    factory: () => DEFAULT_SNACKBAR_CONFIG,
});

class SnackbarService {
    constructor() {
        this.snackBar = inject(MatSnackBar);
        this.config = inject(SNACKBAR_CONFIG);
    }
    /**
     * Display a snackbar with specific type and configuration
     */
    show(props) {
        const { type, message, title, action = this.config.defaultAction, config: userConfig = {}, } = props;
        const typeClass = `acontplus-snackbar-${type}`;
        const panelClasses = this.buildPanelClasses(typeClass, userConfig.panelClass);
        const finalConfig = {
            ...this.config,
            ...userConfig,
            panelClass: panelClasses,
        };
        const displayMessage = this.buildMessage(message, title);
        this.snackBar.open(displayMessage, action, finalConfig);
    }
    /**
     * Quick success notification
     */
    success(props) {
        this.show({
            type: 'success',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.MEDIUM,
                ...props.config,
            },
        });
    }
    /**
     * Quick error notification with longer duration
     */
    error(props) {
        this.show({
            type: 'error',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.LONG,
                ...props.config,
            },
        });
    }
    /**
     * Quick warning notification
     */
    warning(props) {
        this.show({
            type: 'warning',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.MEDIUM,
                ...props.config,
            },
        });
    }
    /**
     * Quick info notification
     */
    info(props) {
        this.show({
            type: 'info',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.MEDIUM,
                ...props.config,
            },
        });
    }
    buildPanelClasses(typeClass, userClasses) {
        const classes = ['acontplus-snackbar', typeClass];
        if (userClasses) {
            const normalizedClasses = Array.isArray(userClasses)
                ? userClasses
                : [userClasses];
            classes.push(...normalizedClasses);
        }
        return classes;
    }
    buildMessage(message, title) {
        if (!this.config.titleEnabled || !title) {
            return message;
        }
        return `${title}: ${message}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class ThemeService {
    constructor() {
        this._darkMode = new BehaviorSubject(false);
        this.isDarkMode$ = this._darkMode.asObservable();
    }
    loadMode() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            this._darkMode.next(savedTheme === 'dark');
            this.applyTheme(savedTheme === 'dark');
        }
        else {
            // Check system preference
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            this._darkMode.next(prefersDark);
            this.applyTheme(prefersDark);
        }
    }
    toggleDarkMode() {
        const newValue = !this._darkMode.value;
        this._darkMode.next(newValue);
        this.applyTheme(newValue);
        localStorage.setItem('theme', newValue ? 'dark' : 'light');
    }
    applyTheme(isDark) {
        if (isDark) {
            document.body.classList.add('dark-theme');
        }
        else {
            document.body.classList.remove('dark-theme');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class SnackbarNotificationComponent {
    constructor() {
        this.snackbarService = inject(SnackbarService);
        this.customNotification = signal({
            type: 'info',
            message: '',
            title: '',
            duration: 5000,
        });
        this.quickMessages = {
            success: SNACKBAR_MESSAGES.SUCCESS.SAVE,
            info: SNACKBAR_MESSAGES.INFO.LOADING,
            warning: SNACKBAR_MESSAGES.WARNING.UNSAVED_CHANGES,
            error: SNACKBAR_MESSAGES.ERROR.NETWORK,
        };
    }
    showQuickNotification(type) {
        this.snackbarService[type]({
            message: this.quickMessages[type],
            title: type.charAt(0).toUpperCase() + type.slice(1),
        });
    }
    showCustomNotification() {
        if (!this.isFormValid())
            return;
        const notification = this.customNotification();
        this.snackbarService.show({
            type: notification.type,
            message: notification.message,
            title: notification.title || undefined,
            config: { duration: notification.duration || 5000 },
        });
    }
    isFormValid() {
        return !!this.customNotification().message.trim();
    }
    resetForm() {
        this.customNotification.set({
            type: 'info',
            message: '',
            title: '',
            duration: 5000,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarNotificationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: SnackbarNotificationComponent, isStandalone: true, selector: "acp-snackbar-notification", ngImport: i0, template: "<div class=\"snackbar-demo-container\">\r\n  <!-- Quick Action Buttons -->\r\n  <mat-card class=\"demo-card\">\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <mat-icon>notifications</mat-icon>\r\n        Quick Notifications\r\n      </mat-card-title>\r\n      <mat-card-subtitle>\r\n        Test common notification scenarios\r\n      </mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <div class=\"quick-buttons\">\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          (click)=\"showQuickNotification('success')\"\r\n          class=\"notification-btn success-btn\"\r\n        >\r\n          <mat-icon>check_circle</mat-icon>\r\n          Success\r\n        </button>\r\n\r\n        <button\r\n          mat-raised-button\r\n          color=\"accent\"\r\n          (click)=\"showQuickNotification('info')\"\r\n          class=\"notification-btn info-btn\"\r\n        >\r\n          <mat-icon>info</mat-icon>\r\n          Info\r\n        </button>\r\n\r\n        <button\r\n          mat-raised-button\r\n          color=\"warn\"\r\n          (click)=\"showQuickNotification('warning')\"\r\n          class=\"notification-btn warning-btn\"\r\n        >\r\n          <mat-icon>warning</mat-icon>\r\n          Warning\r\n        </button>\r\n\r\n        <button\r\n          mat-raised-button\r\n          color=\"warn\"\r\n          (click)=\"showQuickNotification('error')\"\r\n          class=\"notification-btn error-btn\"\r\n        >\r\n          <mat-icon>error</mat-icon>\r\n          Error\r\n        </button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <!-- Custom Notification Builder -->\r\n  <mat-card class=\"demo-card\">\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <mat-icon>build</mat-icon>\r\n        Custom Notification Builder\r\n      </mat-card-title>\r\n      <mat-card-subtitle>\r\n        Create and test custom notifications\r\n      </mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <form class=\"notification-form\" (ngSubmit)=\"showCustomNotification()\">\r\n        <div class=\"form-row\">\r\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n            <mat-label>Type</mat-label>\r\n            <mat-select\r\n              [(ngModel)]=\"customNotification().type\"\r\n              name=\"type\"\r\n              required\r\n            >\r\n              <mat-option value=\"success\">Success</mat-option>\r\n              <mat-option value=\"info\">Info</mat-option>\r\n              <mat-option value=\"warning\">Warning</mat-option>\r\n              <mat-option value=\"error\">Error</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n            <mat-label>Duration (ms)</mat-label>\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              [(ngModel)]=\"customNotification().duration\"\r\n              name=\"duration\"\r\n              placeholder=\"5000\"\r\n              min=\"1000\"\r\n              max=\"30000\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n          <mat-label>Title (optional)</mat-label>\r\n          <input\r\n            matInput\r\n            [(ngModel)]=\"customNotification().title\"\r\n            name=\"title\"\r\n            placeholder=\"Notification title\"\r\n          />\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n          <mat-label>Message</mat-label>\r\n          <textarea\r\n            matInput\r\n            [(ngModel)]=\"customNotification().message\"\r\n            name=\"message\"\r\n            placeholder=\"Your notification message...\"\r\n            rows=\"3\"\r\n            required\r\n          ></textarea>\r\n        </mat-form-field>\r\n\r\n        <div class=\"form-actions\">\r\n          <button\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"!isFormValid()\"\r\n            class=\"send-btn\"\r\n          >\r\n            <mat-icon>send</mat-icon>\r\n            Send Notification\r\n          </button>\r\n\r\n          <button\r\n            mat-button\r\n            type=\"button\"\r\n            (click)=\"resetForm()\"\r\n            class=\"reset-btn\"\r\n          >\r\n            <mat-icon>refresh</mat-icon>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <!-- Usage Examples -->\r\n  <!--  <mat-card class=\"demo-card\">-->\r\n  <!--    <mat-card-header>-->\r\n  <!--      <mat-card-title>-->\r\n  <!--        <mat-icon>code</mat-icon>-->\r\n  <!--        Usage Examples-->\r\n  <!--      </mat-card-title>-->\r\n  <!--    </mat-card-header>-->\r\n\r\n  <!--    <mat-card-content>-->\r\n  <!--      <div class=\"code-examples\">-->\r\n  <!--        <h4>Basic Usage:</h4>-->\r\n  <!--        <pre><code>{{ basicUsageExample() }}</code></pre>-->\r\n\r\n  <!--        <h4>With Configuration:</h4>-->\r\n  <!--        <pre><code>{{ advancedUsageExample() }}</code></pre>-->\r\n  <!--      </div>-->\r\n  <!--    </mat-card-content>-->\r\n  <!--  </mat-card>-->\r\n</div>\r\n", styles: [".snackbar-demo-container{padding:20px;max-width:800px;margin:0 auto;display:flex;flex-direction:column;gap:24px}.demo-card{border-radius:12px;box-shadow:0 4px 12px #0000001a}.demo-card mat-card-header{margin-bottom:16px}.demo-card mat-card-title{display:flex;align-items:center;gap:8px;font-size:1.2em}.quick-buttons{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:12px;margin-top:16px}.notification-btn{display:flex;align-items:center;gap:8px;padding:12px 16px;border-radius:8px;font-weight:500;transition:all .3s ease}.notification-btn:hover{transform:translateY(-2px);box-shadow:0 4px 12px #0003}.success-btn{background:linear-gradient(135deg,#4caf50,#66bb6a);color:#fff}.info-btn{background:linear-gradient(135deg,#2196f3,#42a5f5);color:#fff}.warning-btn{background:linear-gradient(135deg,#ff9800,#ffb74d);color:#fff}.error-btn{background:linear-gradient(135deg,#f44336,#ef5350);color:#fff}.notification-form{display:flex;flex-direction:column;gap:16px;margin-top:16px}.form-row{display:grid;grid-template-columns:1fr 1fr;gap:16px}.form-field{flex:1}.full-width{width:100%}.form-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px}.send-btn{background:linear-gradient(135deg,#1976d2,#1e88e5);color:#fff}.reset-btn{color:#666}.code-examples{background:#f5f5f5;border-radius:8px;padding:16px;margin-top:16px}.code-examples h4{margin:16px 0 8px;color:#333;font-size:.9em;font-weight:600}.code-examples h4:first-child{margin-top:0}.code-examples pre{background:#2d2d2d;color:#f8f8f2;padding:12px;border-radius:6px;overflow-x:auto;font-size:.85em;line-height:1.4}.code-examples code{font-family:Courier New,monospace}@media (max-width: 768px){.snackbar-demo-container{padding:16px}.form-row{grid-template-columns:1fr}.quick-buttons{grid-template-columns:repeat(2,1fr)}.form-actions{justify-content:stretch}.form-actions button{flex:1}}\n"], dependencies: [{ kind: "ngmodule", type: MatCardModule }, { kind: "component", type: i1$1.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i1$1.MatCardContent, selector: "mat-card-content" }, { kind: "component", type: i1$1.MatCardHeader, selector: "mat-card-header" }, { kind: "directive", type: i1$1.MatCardSubtitle, selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]" }, { kind: "directive", type: i1$1.MatCardTitle, selector: "mat-card-title, [mat-card-title], [matCardTitle]" }, { kind: "component", type: MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: MatFormField$1, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "directive", type: MatLabel$1, selector: "mat-label" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "component", type: MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth", "canSelectNullableOptions"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarNotificationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-snackbar-notification', imports: [
                        MatCardModule,
                        MatButton,
                        MatFormField$1,
                        MatInput,
                        MatLabel$1,
                        FormsModule,
                        MatOption,
                        MatSelect,
                        MatIcon,
                    ], template: "<div class=\"snackbar-demo-container\">\r\n  <!-- Quick Action Buttons -->\r\n  <mat-card class=\"demo-card\">\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <mat-icon>notifications</mat-icon>\r\n        Quick Notifications\r\n      </mat-card-title>\r\n      <mat-card-subtitle>\r\n        Test common notification scenarios\r\n      </mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <div class=\"quick-buttons\">\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          (click)=\"showQuickNotification('success')\"\r\n          class=\"notification-btn success-btn\"\r\n        >\r\n          <mat-icon>check_circle</mat-icon>\r\n          Success\r\n        </button>\r\n\r\n        <button\r\n          mat-raised-button\r\n          color=\"accent\"\r\n          (click)=\"showQuickNotification('info')\"\r\n          class=\"notification-btn info-btn\"\r\n        >\r\n          <mat-icon>info</mat-icon>\r\n          Info\r\n        </button>\r\n\r\n        <button\r\n          mat-raised-button\r\n          color=\"warn\"\r\n          (click)=\"showQuickNotification('warning')\"\r\n          class=\"notification-btn warning-btn\"\r\n        >\r\n          <mat-icon>warning</mat-icon>\r\n          Warning\r\n        </button>\r\n\r\n        <button\r\n          mat-raised-button\r\n          color=\"warn\"\r\n          (click)=\"showQuickNotification('error')\"\r\n          class=\"notification-btn error-btn\"\r\n        >\r\n          <mat-icon>error</mat-icon>\r\n          Error\r\n        </button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <!-- Custom Notification Builder -->\r\n  <mat-card class=\"demo-card\">\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <mat-icon>build</mat-icon>\r\n        Custom Notification Builder\r\n      </mat-card-title>\r\n      <mat-card-subtitle>\r\n        Create and test custom notifications\r\n      </mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <form class=\"notification-form\" (ngSubmit)=\"showCustomNotification()\">\r\n        <div class=\"form-row\">\r\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n            <mat-label>Type</mat-label>\r\n            <mat-select\r\n              [(ngModel)]=\"customNotification().type\"\r\n              name=\"type\"\r\n              required\r\n            >\r\n              <mat-option value=\"success\">Success</mat-option>\r\n              <mat-option value=\"info\">Info</mat-option>\r\n              <mat-option value=\"warning\">Warning</mat-option>\r\n              <mat-option value=\"error\">Error</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n            <mat-label>Duration (ms)</mat-label>\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              [(ngModel)]=\"customNotification().duration\"\r\n              name=\"duration\"\r\n              placeholder=\"5000\"\r\n              min=\"1000\"\r\n              max=\"30000\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n          <mat-label>Title (optional)</mat-label>\r\n          <input\r\n            matInput\r\n            [(ngModel)]=\"customNotification().title\"\r\n            name=\"title\"\r\n            placeholder=\"Notification title\"\r\n          />\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n          <mat-label>Message</mat-label>\r\n          <textarea\r\n            matInput\r\n            [(ngModel)]=\"customNotification().message\"\r\n            name=\"message\"\r\n            placeholder=\"Your notification message...\"\r\n            rows=\"3\"\r\n            required\r\n          ></textarea>\r\n        </mat-form-field>\r\n\r\n        <div class=\"form-actions\">\r\n          <button\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"!isFormValid()\"\r\n            class=\"send-btn\"\r\n          >\r\n            <mat-icon>send</mat-icon>\r\n            Send Notification\r\n          </button>\r\n\r\n          <button\r\n            mat-button\r\n            type=\"button\"\r\n            (click)=\"resetForm()\"\r\n            class=\"reset-btn\"\r\n          >\r\n            <mat-icon>refresh</mat-icon>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <!-- Usage Examples -->\r\n  <!--  <mat-card class=\"demo-card\">-->\r\n  <!--    <mat-card-header>-->\r\n  <!--      <mat-card-title>-->\r\n  <!--        <mat-icon>code</mat-icon>-->\r\n  <!--        Usage Examples-->\r\n  <!--      </mat-card-title>-->\r\n  <!--    </mat-card-header>-->\r\n\r\n  <!--    <mat-card-content>-->\r\n  <!--      <div class=\"code-examples\">-->\r\n  <!--        <h4>Basic Usage:</h4>-->\r\n  <!--        <pre><code>{{ basicUsageExample() }}</code></pre>-->\r\n\r\n  <!--        <h4>With Configuration:</h4>-->\r\n  <!--        <pre><code>{{ advancedUsageExample() }}</code></pre>-->\r\n  <!--      </div>-->\r\n  <!--    </mat-card-content>-->\r\n  <!--  </mat-card>-->\r\n</div>\r\n", styles: [".snackbar-demo-container{padding:20px;max-width:800px;margin:0 auto;display:flex;flex-direction:column;gap:24px}.demo-card{border-radius:12px;box-shadow:0 4px 12px #0000001a}.demo-card mat-card-header{margin-bottom:16px}.demo-card mat-card-title{display:flex;align-items:center;gap:8px;font-size:1.2em}.quick-buttons{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:12px;margin-top:16px}.notification-btn{display:flex;align-items:center;gap:8px;padding:12px 16px;border-radius:8px;font-weight:500;transition:all .3s ease}.notification-btn:hover{transform:translateY(-2px);box-shadow:0 4px 12px #0003}.success-btn{background:linear-gradient(135deg,#4caf50,#66bb6a);color:#fff}.info-btn{background:linear-gradient(135deg,#2196f3,#42a5f5);color:#fff}.warning-btn{background:linear-gradient(135deg,#ff9800,#ffb74d);color:#fff}.error-btn{background:linear-gradient(135deg,#f44336,#ef5350);color:#fff}.notification-form{display:flex;flex-direction:column;gap:16px;margin-top:16px}.form-row{display:grid;grid-template-columns:1fr 1fr;gap:16px}.form-field{flex:1}.full-width{width:100%}.form-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px}.send-btn{background:linear-gradient(135deg,#1976d2,#1e88e5);color:#fff}.reset-btn{color:#666}.code-examples{background:#f5f5f5;border-radius:8px;padding:16px;margin-top:16px}.code-examples h4{margin:16px 0 8px;color:#333;font-size:.9em;font-weight:600}.code-examples h4:first-child{margin-top:0}.code-examples pre{background:#2d2d2d;color:#f8f8f2;padding:12px;border-radius:6px;overflow-x:auto;font-size:.85em;line-height:1.4}.code-examples code{font-family:Courier New,monospace}@media (max-width: 768px){.snackbar-demo-container{padding:16px}.form-row{grid-template-columns:1fr}.quick-buttons{grid-template-columns:repeat(2,1fr)}.form-actions{justify-content:stretch}.form-actions button{flex:1}}\n"] }]
        }] });

class CustomTabulatorComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: CustomTabulatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: CustomTabulatorComponent, isStandalone: true, selector: "lib-custom-tabulator", ngImport: i0, template: "<p>custom-tabulator works!</p>\r\n", styles: [""] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: CustomTabulatorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-custom-tabulator', imports: [], template: "<p>custom-tabulator works!</p>\r\n" }]
        }] });

class GetTotalPipe {
    transform(colName, dataSource) {
        return this.getTotal(colName, dataSource) || '';
    }
    /**
     * Calculate and return the total (sum) of all the column --> the column must be number
     */
    getTotal(colName, dataSource) {
        const total = dataSource
            .map((row) => row[colName])
            .reduce((acc, value) => (value ? acc + Number(value) : acc), 0);
        return total?.toFixed(2);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: GetTotalPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "20.0.3", ngImport: i0, type: GetTotalPipe, isStandalone: true, name: "getTotal" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: GetTotalPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'getTotal',
                    standalone: true,
                }]
        }] });

/*
  InjectionToken is a generic class provided by Angular for creating custom injection tokens.
*/
const DYNAMIC_INPUT = new InjectionToken('DYNAMIC_INPUT');

class MatDynamicTableComponent {
    constructor() {
        this.viewContainerRef = inject(ViewContainerRef);
        this.injector = inject(Injector);
        this.embeddedViews = [];
        this.showExpand = false;
        this.showFooter = false;
        this.locale = '';
        this.highlightRowIndex = 0;
        this.visibleColumns = [];
        this.columnDefinitions = [];
        this.columnsToDisplayWithExpand = this.showExpand
            ? [...this.visibleColumns, 'expand']
            : this.visibleColumns;
        this.showSelectBox = false;
        this.tableData = [];
        this.rowSelected = new EventEmitter();
        this.copyRow = new EventEmitter();
        this.showExpanded = output();
        this.hideExpanded = output();
        this.dataSource = new MatTableDataSource([]);
        this.selection = new SelectionModel(true, []);
        this.enablePagination = input(false);
        this.pageEvent = output();
        this.paginationConfig = input();
        this.isLoadingData = input(false);
        this.createInjector = (element) => Injector.create({
            providers: [
                {
                    //please note that the STATUS_INPUT is a token that we define in the status-input.ts file
                    provide: DYNAMIC_INPUT,
                    // here we pass the element that we want to use
                    useValue: element,
                },
            ],
            parent: this.injector,
        });
    }
    handlePageEvent(e) {
        this.pageEvent.emit(e);
    }
    ngAfterContentInit() {
        this.columnDefs.forEach((columnDef) => this.table.addColumnDef(columnDef));
        this.rowDefs.forEach((rowDef) => this.table.addRowDef(rowDef));
        this.headerRowDefs.forEach((headerRowDef) => this.table.addHeaderRowDef(headerRowDef));
        if (this.showFooter) {
            this.footerRowDefs.forEach((footerRowDef) => this.table.addFooterRowDef(footerRowDef));
        }
        else {
            this.footerRowDefs.forEach((footerRowDef) => this.table.removeFooterRowDef(footerRowDef));
        }
        // init grid state
        this.selection = new SelectionModel(true, []);
        this.table.setNoDataRow(this.noDataRow);
    }
    ngOnInit() {
        if (!this.visibleColumns) {
            this.visibleColumns = this.columnDefinitions.map((col) => col.key);
            this.columnDefinitions.forEach((col, index) => (col.index = index));
        }
        if (this.showSelectBox && this.visibleColumns.indexOf('select') < 0) {
            this.visibleColumns = ['select', ...this.visibleColumns];
        }
    }
    ngOnChanges(changes) {
        if (changes['tableData']?.currentValue && changes['tableData']) {
            this.dataSource = new MatTableDataSource(this.tableData);
        }
    }
    createEmbeddedView(column, element) {
        console.log(column);
        const templateRef = column.body;
        // Create context for the template
        const context = {
            $implicit: element,
            ...column.body,
        };
        // Create the embedded view
        const viewRef = templateRef.createEmbeddedView(context);
        this.embeddedViews.push(viewRef);
        // Attach to the view container
        this.viewContainerRef.insert(viewRef);
    }
    moveNextRow(cell) {
        console.log('moveNextRow(): ' + JSON.stringify(cell));
    }
    selectRow(row) {
        // this.rowSelected.emit(row);
        this.rowSelected.emit(this.selection.selected);
    }
    // ----START CHECKBOX LOGIC
    /** Whether the number of selected elements matches the total number of rows. */
    isAllSelected() {
        const numSelected = this.selection.selected.length;
        const numRows = this.dataSource.data.length;
        return numSelected === numRows;
    }
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    masterToggle() {
        this.isAllSelected()
            ? this.selection.clear()
            : this.dataSource.data.forEach((row) => this.selection.select(row));
    }
    /** The label for the checkbox on the passed row */
    checkboxLabel(row) {
        if (!row) {
            return `${this.isAllSelected() ? 'select' : 'deselect'} all`;
        }
        return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row`; //  ${row.id + 1}
    }
    // ----END CHECKBOX LOGIC
    showElement(index, height) {
        const row = this.rows.toArray()[index]; // .find(row => row.element.nativeElement.getAttribute('position') === indexstr);
        if (row != null) {
            const rect = row.element.nativeElement.getBoundingClientRect();
            if (rect.y <= 0 || rect.y + rect.height > height) {
                row.element.nativeElement.scrollIntoView(false, {
                    behavior: 'instant',
                });
            }
            return;
        }
        console.log('not found');
    }
    onHighlightedRowChange(event) {
        // let rect     = event.target.getBoundingClientRect();
        let focused = this.dataSource.data[this.highlightRowIndex];
        const x = this.dataSource.data.indexOf(focused);
        const l = this.dataSource.data.length;
        if (event.keyCode === 38) {
            // Up
            if (x > 0) {
                focused = this.dataSource.data[x - 1];
            }
        }
        else if (event.keyCode === 40) {
            // Down
            if (x < l - 1) {
                focused = this.dataSource.data[x + 1];
            }
        }
        if (focused != null) {
            this.showElement(this.highlightRowIndex, 35); // $table-row-height = 35px // rect.height
        }
    }
    getRowColor(element) {
        return element.colorRow ? element.colorRow : ''; // Return empty string if no color is defined
    }
    onExpand($event, element) {
        $event.stopPropagation();
        this.expandedElement = this.expandedElement === element ? null : element;
        if (this.expandedElement) {
            this.showExpanded.emit(element);
        }
        else {
            this.hideExpanded.emit(element);
        }
    }
    ngOnDestroy() {
        // Clean up components and views to prevent memory leaks
        this.embeddedViews.forEach((view) => view.destroy());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatDynamicTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.0.3", type: MatDynamicTableComponent, isStandalone: true, selector: "acp-mat-dynamic-table", inputs: { showExpand: { classPropertyName: "showExpand", publicName: "showExpand", isSignal: false, isRequired: false, transformFunction: null }, showFooter: { classPropertyName: "showFooter", publicName: "showFooter", isSignal: false, isRequired: false, transformFunction: null }, locale: { classPropertyName: "locale", publicName: "locale", isSignal: false, isRequired: false, transformFunction: null }, highlightRowIndex: { classPropertyName: "highlightRowIndex", publicName: "highlightRowIndex", isSignal: false, isRequired: false, transformFunction: null }, visibleColumns: { classPropertyName: "visibleColumns", publicName: "visibleColumns", isSignal: false, isRequired: false, transformFunction: null }, columnDefinitions: { classPropertyName: "columnDefinitions", publicName: "columnDefinitions", isSignal: false, isRequired: false, transformFunction: null }, showSelectBox: { classPropertyName: "showSelectBox", publicName: "showSelectBox", isSignal: false, isRequired: false, transformFunction: null }, tableData: { classPropertyName: "tableData", publicName: "tableData", isSignal: false, isRequired: false, transformFunction: null }, templateOp: { classPropertyName: "templateOp", publicName: "templateOp", isSignal: false, isRequired: false, transformFunction: null }, expandedDetail: { classPropertyName: "expandedDetail", publicName: "expandedDetail", isSignal: false, isRequired: false, transformFunction: null }, enablePagination: { classPropertyName: "enablePagination", publicName: "enablePagination", isSignal: true, isRequired: false, transformFunction: null }, paginationConfig: { classPropertyName: "paginationConfig", publicName: "paginationConfig", isSignal: true, isRequired: false, transformFunction: null }, isLoadingData: { classPropertyName: "isLoadingData", publicName: "isLoadingData", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { rowSelected: "rowSelected", copyRow: "copyRow", showExpanded: "showExpanded", hideExpanded: "hideExpanded", pageEvent: "pageEvent" }, queries: [{ propertyName: "noDataRow", first: true, predicate: MatNoDataRow, descendants: true }, { propertyName: "headerRowDefs", predicate: MatHeaderRowDef }, { propertyName: "rowDefs", predicate: MatRowDef }, { propertyName: "footerRowDefs", predicate: MatFooterRowDef }, { propertyName: "columnDefs", predicate: MatColumnDef }, { propertyName: "rows", predicate: ViewContainerRef }], viewQueries: [{ propertyName: "table", first: true, predicate: MatTable, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"mat-table-container\">\r\n  <!--  <app-custom-mat-spinner [isLoadingResults]=\"isLoadingData()\" />-->\r\n  <div class=\"table-container small-table\">\r\n    <table #sort=\"matSort\" [dataSource]=\"dataSource.data\" mat-table matSort>\r\n      <!-- (matSortChange)=\"sortData($event)\" -->\r\n\r\n      @if (columnDefinitions) {\r\n        <!-- Checkbox Column (optional) -->\r\n        <ng-container matColumnDef=\"select\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox\r\n              (change)=\"$event ? masterToggle() : null\"\r\n              (click)=\"$event.stopPropagation()\"\r\n              [aria-label]=\"checkboxLabel()\"\r\n              [checked]=\"selection.hasValue() && isAllSelected()\"\r\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n            >\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <mat-checkbox\r\n              (change)=\"$event ? selection.toggle(row) : null; selectRow(row)\"\r\n              (click)=\"$event.stopPropagation()\"\r\n              [aria-label]=\"checkboxLabel(row)\"\r\n              [checked]=\"selection.isSelected(row)\"\r\n            >\r\n            </mat-checkbox>\r\n          </td>\r\n          <td *matFooterCellDef mat-footer-cell></td>\r\n        </ng-container>\r\n\r\n        <!-- Dynamic columns based on column definitions -->\r\n        @for (col of columnDefinitions; track $index) {\r\n          <!-- Column header -->\r\n          <ng-container [matColumnDef]=\"col.key\">\r\n            <th *matHeaderCellDef mat-header-cell mat-sort-header>\r\n              {{ col.label }}\r\n            </th>\r\n\r\n            <!-- Column cell -->\r\n            <td\r\n              mat-cell\r\n              *matCellDef=\"let element; let i = index\"\r\n              [ngClass]=\"{ highlighted: highlightRowIndex === i }\"\r\n            >\r\n              <!-- Operations column with custom template -->\r\n              @if (col.key === \"op\") {\r\n                <div class=\"d-flex flex-row gap-1\">\r\n                  <ng-container\r\n                    [ngTemplateOutlet]=\"templateOp\"\r\n                    [ngTemplateOutletContext]=\"{ $implicit: element }\"\r\n                  ></ng-container>\r\n                </div>\r\n              }\r\n\r\n              <!-- Expandable row toggle button -->\r\n              @if (showExpand && col.key === \"expand\") {\r\n                <button\r\n                  mat-icon-button\r\n                  aria-label=\"expand row\"\r\n                  (click)=\"onExpand($event, element)\"\r\n                >\r\n                  @if (expandedElement === element) {\r\n                    <mat-icon>keyboard_arrow_up</mat-icon>\r\n                  } @else {\r\n                    <mat-icon>keyboard_arrow_down</mat-icon>\r\n                  }\r\n                </button>\r\n              }\r\n              @switch (col.type) {\r\n                @case (\"image\") {\r\n                  <img\r\n                    [src]=\"element[col.key]\"\r\n                    class=\"img-fluid img-thumbnail my-1\"\r\n                    width=\"50\"\r\n                    alt=\"\"\r\n                  />\r\n                }\r\n                @case (\"number\") {\r\n                  <div>{{ element[col.key] | number: \"1.2\" : locale }}</div>\r\n                }\r\n                @case (\"date\") {\r\n                  <div>{{ element[col.key] | date: \"dd.MM.yyyy\" }}</div>\r\n                }\r\n                @case (\"template\") {\r\n                  <ng-container\r\n                    *ngTemplateOutlet=\"\r\n                      col.templateOutlet;\r\n                      context: { $implicit: element }\r\n                    \"\r\n                  />\r\n                }\r\n                @case (\"custom\") {\r\n                  <!-- Dynamic component column -->\r\n                  @if (col.columnType === \"component\") {\r\n<!--                    <ng-container-->\r\n<!--                      [ngComponentOutlet]=\"col.body\"-->\r\n<!--                      [ngComponentOutletInjector]=\"createInjector(element)\"-->\r\n<!--                    />-->\r\n                  }\r\n                  @if (col.columnType === \"html\") {\r\n                    <!-- HTML content column -->\r\n                    <div [innerHTML]=\"col.body(element)\"></div>\r\n                  }\r\n                  @if (col.columnType === \"template\") {\r\n                    <ng-container\r\n                      *ngTemplateOutlet=\"\r\n                        col.body;\r\n                        context: { $implicit: element }\r\n                      \"\r\n                    />\r\n                  }\r\n                }\r\n\r\n                @default {\r\n                  <div>{{ element[col.key] }}</div>\r\n                }\r\n              }\r\n            </td>\r\n\r\n            <td *matFooterCellDef mat-footer-cell>\r\n              @if (!col.index) {\r\n                <div>Total</div>\r\n                <!-- col.index === 0 -->\r\n              }\r\n              @if (col.index && col.hasFooter) {\r\n                <div>{{ col.key | getTotal: this.dataSource.data }}</div>\r\n              }\r\n              <!-- col.index !== 0 -->\r\n            </td>\r\n          </ng-container>\r\n        }\r\n\r\n        <!-- Expanded Content Column -->\r\n        @if (showExpand) {\r\n          <ng-container matColumnDef=\"expandedDetail\">\r\n            <td\r\n              mat-cell\r\n              *matCellDef=\"let element\"\r\n              [attr.colspan]=\"visibleColumns.length\"\r\n            >\r\n              <div\r\n                class=\"m-0 p-0\"\r\n                [@detailExpand]=\"\r\n                  element === expandedElement ? 'expanded' : 'collapsed'\r\n                \"\r\n              >\r\n                <ng-container\r\n                  *ngTemplateOutlet=\"expandedDetail; context: { row: element }\"\r\n                ></ng-container>\r\n              </div>\r\n            </td>\r\n          </ng-container>\r\n        }\r\n\r\n        <!-- Rows -->\r\n        <tr\r\n          mat-header-row\r\n          *matHeaderRowDef=\"visibleColumns; sticky: true\"\r\n          class=\"small-header\"\r\n        ></tr>\r\n        <tr\r\n          mat-row\r\n          *matRowDef=\"let row; columns: visibleColumns\"\r\n          [class.example-expanded-row]=\"expandedElement === row\"\r\n          (click)=\"selectRow(row)\"\r\n          [style]=\"getRowColor(row) || {}\"\r\n        ></tr>\r\n        @if (showExpand) {\r\n          <tr\r\n            mat-row\r\n            *matRowDef=\"let row; columns: ['expandedDetail']\"\r\n            class=\"example-detail-row\"\r\n          ></tr>\r\n        }\r\n\r\n        <!-- No Data Row -->\r\n        <tr class=\"mat-row\" *matNoDataRow>\r\n          <td\r\n            class=\"mat-cell text-center\"\r\n            [attr.colspan]=\"visibleColumns.length\"\r\n          >\r\n            Sin Registro\r\n          </td>\r\n        </tr>\r\n\r\n        <!-- Footer Row -->\r\n        @if (showFooter && dataSource.data.length > 0) {\r\n          <tr mat-footer-row *matFooterRowDef=\"visibleColumns\"></tr>\r\n        }\r\n      }\r\n    </table>\r\n  </div>\r\n\r\n  @if (enablePagination() && paginationConfig()) {\r\n    <mat-paginator\r\n      #paginator\r\n      [disabled]=\"isLoadingData()\"\r\n      (page)=\"handlePageEvent($event)\"\r\n      [length]=\"paginationConfig()?.totalRecords\"\r\n      [pageSize]=\"paginationConfig()?.pageSize\"\r\n      [pageSizeOptions]=\"paginationConfig()?.pageSizeOptions ?? []\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageIndex]=\"paginationConfig()?.pageIndex\"\r\n      aria-label=\"Select page\"\r\n    >\r\n    </mat-paginator>\r\n  }\r\n</div>\r\n", styles: [".table-container{position:relative;min-height:200px;max-height:400px;overflow:auto}table{width:100%}tr.example-detail-row{height:0}tr.example-element-row:not(.example-expanded-row):hover{background:#f5f5f5}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}\n"], dependencies: [{ kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i1$2.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i1$2.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i1$2.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i1$2.MatColumnDef, selector: "[matColumnDef]", inputs: ["matColumnDef"] }, { kind: "directive", type: i1$2.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i1$2.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i1$2.MatFooterCellDef, selector: "[matFooterCellDef]" }, { kind: "directive", type: i1$2.MatFooterRowDef, selector: "[matFooterRowDef]", inputs: ["matFooterRowDef", "matFooterRowDefSticky"] }, { kind: "directive", type: i1$2.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i1$2.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "directive", type: i1$2.MatFooterCell, selector: "mat-footer-cell, td[mat-footer-cell]" }, { kind: "component", type: i1$2.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i1$2.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "component", type: i1$2.MatFooterRow, selector: "mat-footer-row, tr[mat-footer-row]", exportAs: ["matFooterRow"] }, { kind: "directive", type: i1$2.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { kind: "ngmodule", type: MatCheckboxModule }, { kind: "component", type: i2$1.MatCheckbox, selector: "mat-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "aria-expanded", "aria-controls", "aria-owns", "id", "required", "labelPosition", "name", "value", "disableRipple", "tabIndex", "color", "disabledInteractive", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { kind: "ngmodule", type: MatSortModule }, { kind: "directive", type: i3.MatSort, selector: "[matSort]", inputs: ["matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortDisabled"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i3.MatSortHeader, selector: "[mat-sort-header]", inputs: ["mat-sort-header", "arrowPosition", "start", "disabled", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatPaginatorModule }, { kind: "component", type: i6.MatPaginator, selector: "mat-paginator", inputs: ["color", "pageIndex", "length", "pageSize", "pageSizeOptions", "hidePageSize", "showFirstLastButtons", "selectConfig", "disabled"], outputs: ["page"], exportAs: ["matPaginator"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "pipe", type: GetTotalPipe, name: "getTotal" }, { kind: "pipe", type: DatePipe, name: "date" }, { kind: "pipe", type: DecimalPipe, name: "number" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], animations: [
            trigger('detailExpand', [
                state('collapsed,void', style({ height: '0px', minHeight: '0' })),
                state('expanded', style({ height: '*' })),
                transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
            ]),
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: MatDynamicTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-mat-dynamic-table', imports: [
                        MatTableModule,
                        MatCheckboxModule,
                        MatSortModule,
                        MatIconModule,
                        MatButtonModule,
                        MatPaginatorModule,
                        NgClass,
                        GetTotalPipe,
                        DatePipe,
                        DecimalPipe,
                        NgTemplateOutlet,
                        NgComponentOutlet,
                    ], animations: [
                        trigger('detailExpand', [
                            state('collapsed,void', style({ height: '0px', minHeight: '0' })),
                            state('expanded', style({ height: '*' })),
                            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                        ]),
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"mat-table-container\">\r\n  <!--  <app-custom-mat-spinner [isLoadingResults]=\"isLoadingData()\" />-->\r\n  <div class=\"table-container small-table\">\r\n    <table #sort=\"matSort\" [dataSource]=\"dataSource.data\" mat-table matSort>\r\n      <!-- (matSortChange)=\"sortData($event)\" -->\r\n\r\n      @if (columnDefinitions) {\r\n        <!-- Checkbox Column (optional) -->\r\n        <ng-container matColumnDef=\"select\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox\r\n              (change)=\"$event ? masterToggle() : null\"\r\n              (click)=\"$event.stopPropagation()\"\r\n              [aria-label]=\"checkboxLabel()\"\r\n              [checked]=\"selection.hasValue() && isAllSelected()\"\r\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n            >\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <mat-checkbox\r\n              (change)=\"$event ? selection.toggle(row) : null; selectRow(row)\"\r\n              (click)=\"$event.stopPropagation()\"\r\n              [aria-label]=\"checkboxLabel(row)\"\r\n              [checked]=\"selection.isSelected(row)\"\r\n            >\r\n            </mat-checkbox>\r\n          </td>\r\n          <td *matFooterCellDef mat-footer-cell></td>\r\n        </ng-container>\r\n\r\n        <!-- Dynamic columns based on column definitions -->\r\n        @for (col of columnDefinitions; track $index) {\r\n          <!-- Column header -->\r\n          <ng-container [matColumnDef]=\"col.key\">\r\n            <th *matHeaderCellDef mat-header-cell mat-sort-header>\r\n              {{ col.label }}\r\n            </th>\r\n\r\n            <!-- Column cell -->\r\n            <td\r\n              mat-cell\r\n              *matCellDef=\"let element; let i = index\"\r\n              [ngClass]=\"{ highlighted: highlightRowIndex === i }\"\r\n            >\r\n              <!-- Operations column with custom template -->\r\n              @if (col.key === \"op\") {\r\n                <div class=\"d-flex flex-row gap-1\">\r\n                  <ng-container\r\n                    [ngTemplateOutlet]=\"templateOp\"\r\n                    [ngTemplateOutletContext]=\"{ $implicit: element }\"\r\n                  ></ng-container>\r\n                </div>\r\n              }\r\n\r\n              <!-- Expandable row toggle button -->\r\n              @if (showExpand && col.key === \"expand\") {\r\n                <button\r\n                  mat-icon-button\r\n                  aria-label=\"expand row\"\r\n                  (click)=\"onExpand($event, element)\"\r\n                >\r\n                  @if (expandedElement === element) {\r\n                    <mat-icon>keyboard_arrow_up</mat-icon>\r\n                  } @else {\r\n                    <mat-icon>keyboard_arrow_down</mat-icon>\r\n                  }\r\n                </button>\r\n              }\r\n              @switch (col.type) {\r\n                @case (\"image\") {\r\n                  <img\r\n                    [src]=\"element[col.key]\"\r\n                    class=\"img-fluid img-thumbnail my-1\"\r\n                    width=\"50\"\r\n                    alt=\"\"\r\n                  />\r\n                }\r\n                @case (\"number\") {\r\n                  <div>{{ element[col.key] | number: \"1.2\" : locale }}</div>\r\n                }\r\n                @case (\"date\") {\r\n                  <div>{{ element[col.key] | date: \"dd.MM.yyyy\" }}</div>\r\n                }\r\n                @case (\"template\") {\r\n                  <ng-container\r\n                    *ngTemplateOutlet=\"\r\n                      col.templateOutlet;\r\n                      context: { $implicit: element }\r\n                    \"\r\n                  />\r\n                }\r\n                @case (\"custom\") {\r\n                  <!-- Dynamic component column -->\r\n                  @if (col.columnType === \"component\") {\r\n<!--                    <ng-container-->\r\n<!--                      [ngComponentOutlet]=\"col.body\"-->\r\n<!--                      [ngComponentOutletInjector]=\"createInjector(element)\"-->\r\n<!--                    />-->\r\n                  }\r\n                  @if (col.columnType === \"html\") {\r\n                    <!-- HTML content column -->\r\n                    <div [innerHTML]=\"col.body(element)\"></div>\r\n                  }\r\n                  @if (col.columnType === \"template\") {\r\n                    <ng-container\r\n                      *ngTemplateOutlet=\"\r\n                        col.body;\r\n                        context: { $implicit: element }\r\n                      \"\r\n                    />\r\n                  }\r\n                }\r\n\r\n                @default {\r\n                  <div>{{ element[col.key] }}</div>\r\n                }\r\n              }\r\n            </td>\r\n\r\n            <td *matFooterCellDef mat-footer-cell>\r\n              @if (!col.index) {\r\n                <div>Total</div>\r\n                <!-- col.index === 0 -->\r\n              }\r\n              @if (col.index && col.hasFooter) {\r\n                <div>{{ col.key | getTotal: this.dataSource.data }}</div>\r\n              }\r\n              <!-- col.index !== 0 -->\r\n            </td>\r\n          </ng-container>\r\n        }\r\n\r\n        <!-- Expanded Content Column -->\r\n        @if (showExpand) {\r\n          <ng-container matColumnDef=\"expandedDetail\">\r\n            <td\r\n              mat-cell\r\n              *matCellDef=\"let element\"\r\n              [attr.colspan]=\"visibleColumns.length\"\r\n            >\r\n              <div\r\n                class=\"m-0 p-0\"\r\n                [@detailExpand]=\"\r\n                  element === expandedElement ? 'expanded' : 'collapsed'\r\n                \"\r\n              >\r\n                <ng-container\r\n                  *ngTemplateOutlet=\"expandedDetail; context: { row: element }\"\r\n                ></ng-container>\r\n              </div>\r\n            </td>\r\n          </ng-container>\r\n        }\r\n\r\n        <!-- Rows -->\r\n        <tr\r\n          mat-header-row\r\n          *matHeaderRowDef=\"visibleColumns; sticky: true\"\r\n          class=\"small-header\"\r\n        ></tr>\r\n        <tr\r\n          mat-row\r\n          *matRowDef=\"let row; columns: visibleColumns\"\r\n          [class.example-expanded-row]=\"expandedElement === row\"\r\n          (click)=\"selectRow(row)\"\r\n          [style]=\"getRowColor(row) || {}\"\r\n        ></tr>\r\n        @if (showExpand) {\r\n          <tr\r\n            mat-row\r\n            *matRowDef=\"let row; columns: ['expandedDetail']\"\r\n            class=\"example-detail-row\"\r\n          ></tr>\r\n        }\r\n\r\n        <!-- No Data Row -->\r\n        <tr class=\"mat-row\" *matNoDataRow>\r\n          <td\r\n            class=\"mat-cell text-center\"\r\n            [attr.colspan]=\"visibleColumns.length\"\r\n          >\r\n            Sin Registro\r\n          </td>\r\n        </tr>\r\n\r\n        <!-- Footer Row -->\r\n        @if (showFooter && dataSource.data.length > 0) {\r\n          <tr mat-footer-row *matFooterRowDef=\"visibleColumns\"></tr>\r\n        }\r\n      }\r\n    </table>\r\n  </div>\r\n\r\n  @if (enablePagination() && paginationConfig()) {\r\n    <mat-paginator\r\n      #paginator\r\n      [disabled]=\"isLoadingData()\"\r\n      (page)=\"handlePageEvent($event)\"\r\n      [length]=\"paginationConfig()?.totalRecords\"\r\n      [pageSize]=\"paginationConfig()?.pageSize\"\r\n      [pageSizeOptions]=\"paginationConfig()?.pageSizeOptions ?? []\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageIndex]=\"paginationConfig()?.pageIndex\"\r\n      aria-label=\"Select page\"\r\n    >\r\n    </mat-paginator>\r\n  }\r\n</div>\r\n", styles: [".table-container{position:relative;min-height:200px;max-height:400px;overflow:auto}table{width:100%}tr.example-detail-row{height:0}tr.example-element-row:not(.example-expanded-row):hover{background:#f5f5f5}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}\n"] }]
        }], propDecorators: { showExpand: [{
                type: Input
            }], showFooter: [{
                type: Input
            }], locale: [{
                type: Input
            }], highlightRowIndex: [{
                type: Input
            }], visibleColumns: [{
                type: Input
            }], columnDefinitions: [{
                type: Input
            }], showSelectBox: [{
                type: Input
            }], tableData: [{
                type: Input
            }], rowSelected: [{
                type: Output
            }], copyRow: [{
                type: Output
            }], headerRowDefs: [{
                type: ContentChildren,
                args: [MatHeaderRowDef]
            }], rowDefs: [{
                type: ContentChildren,
                args: [MatRowDef]
            }], footerRowDefs: [{
                type: ContentChildren,
                args: [MatFooterRowDef]
            }], columnDefs: [{
                type: ContentChildren,
                args: [MatColumnDef]
            }], noDataRow: [{
                type: ContentChild,
                args: [MatNoDataRow]
            }], table: [{
                type: ViewChild,
                args: [MatTable, { static: true }]
            }], rows: [{
                type: ContentChildren,
                args: [ViewContainerRef]
            }], templateOp: [{
                type: Input
            }], expandedDetail: [{
                type: Input
            }] } });

class ThemeToggleComponent {
    constructor(themeService) {
        this.themeService = themeService;
        this.darkMode$ = this.themeService.isDarkMode$;
    }
    toggleDarkMode() {
        this.themeService.toggleDarkMode();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeToggleComponent, deps: [{ token: ThemeService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: ThemeToggleComponent, isStandalone: true, selector: "acp-theme-toggle", ngImport: i0, template: "<button\r\n  mat-icon-button\r\n  (click)=\"toggleDarkMode()\"\r\n  title=\"{{ (darkMode$ | async) ? 'Modo D\u00EDa' : 'Modo Noche' }}\"\r\n>\r\n  <mat-icon>{{ (darkMode$ | async) ? \"light_mode\" : \"dark_mode\" }}</mat-icon>\r\n</button>\r\n", styles: [""], dependencies: [{ kind: "component", type: MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "pipe", type: AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'acp-theme-toggle', imports: [MatIconButton, MatIcon, AsyncPipe], template: "<button\r\n  mat-icon-button\r\n  (click)=\"toggleDarkMode()\"\r\n  title=\"{{ (darkMode$ | async) ? 'Modo D\u00EDa' : 'Modo Noche' }}\"\r\n>\r\n  <mat-icon>{{ (darkMode$ | async) ? \"light_mode\" : \"dark_mode\" }}</mat-icon>\r\n</button>\r\n" }]
        }], ctorParameters: () => [{ type: ThemeService }] });

/**
 * Token to determine if a request should show spinner
 * Default is true (show spinner for all requests)
 */
const SHOW_SPINNER = new HttpContextToken(() => true);
/**
 * Helper function to disable spinner for specific requests
 * @returns HttpContext with spinner disabled
 */
function withoutSpinner() {
    return new HttpContext().set(SHOW_SPINNER, false);
}
/**
 * Service to track active HTTP requests
 */
class ActiveRequestsTracker {
    constructor() {
        this.requests = [];
    }
    get count() {
        return this.requests.length;
    }
    add(request) {
        this.requests.push(request);
    }
    remove(request) {
        const index = this.requests.indexOf(request);
        if (index >= 0) {
            this.requests.splice(index, 1);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ActiveRequestsTracker, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ActiveRequestsTracker, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ActiveRequestsTracker, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
/**
 * Interceptor that shows/hides a loading spinner based on active HTTP requests
 */
const spinnerInterceptor = (req, next) => {
    // Track active requests requiring spinner
    const activeRequests = inject(ActiveRequestsTracker);
    const overlayService = inject(OverlayService);
    // Skip spinner if disabled for this request
    if (!req.context.get(SHOW_SPINNER)) {
        return next(req);
    }
    // Add request to tracking
    activeRequests.add(req);
    // Show spinner if this is the first active request
    if (activeRequests.count === 1) {
        overlayService.showSpinner();
    }
    return next(req).pipe(finalize(() => {
        // Remove request and hide spinner if no more active requests
        activeRequests.remove(req);
        if (activeRequests.count === 0) {
            overlayService.hideSpinner();
        }
    }));
};

class FieldDefinition {
    constructor(options = {}) {
        this.controlType = 'textbox';
        this.type = 'string';
        this.value = options.value;
        this.valueLabel = options.valueLabel;
        this.defaultValue = options.defaultValue;
        this.defaultValueLabel = options.defaultValueLabel;
        this.key = options.key || '';
        this.label = options.label || '';
        this.dateRangeConfig = options.dateRangeConfig;
        this.isDefaultSearchField = options.isDefaultSearchField;
        this.required = !!options.required;
        this.disabled = options.disabled;
        this.order = options.order === undefined ? 1 : options.order;
        this.icon = options.icon;
        this.controlType = options.controlType || 'textbox';
        this.type = options.type || 'string';
        this.editor = options.editor || ''; // this attribut is for Kendo-Grid
        this.options = options.options || [];
        this.valueOptions = options.valueOptions || [];
        this.errorMessage = options.errorMessage || '';
        this.width = options.width;
        this.valueChangeCallback = options.valueChangeCallback || undefined;
    }
}

class ColumnDefinition extends FieldDefinition {
}

class TableCellIndex {
    constructor(row, column) {
        this.row = row;
        this.column = column;
    }
}

class Pagination {
    /**
     * @param pageIndex Current page index (0-based for MatPagination compatibility)
     * @param pageSize Number of records per page
     * @param maxSize Maximum number of pages displayed in the pagination control
     * @param totalRecords Total number of records
     * @param pageSizeOptions Available page size options
     */
    constructor(pageIndex = 0, // MatPagination starts at 0
    pageSize = 25, maxSize = 5, totalRecords = 0, pageSizeOptions = [25, 50, 75, 100]) {
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
        this.maxSize = maxSize;
        this.totalRecords = totalRecords;
        this.pageSizeOptions = pageSizeOptions;
    }
    /**
     * Calculates the total number of pages.
     */
    getTotalPages() {
        return Math.ceil(this.totalRecords / this.pageSize);
    }
    /**
     * Updates the page size and resets the page index to the first page.
     * @param newPageSize The new page size
     */
    updatePageSize(newPageSize) {
        if (this.pageSizeOptions.includes(newPageSize)) {
            this.pageSize = newPageSize;
            this.pageIndex = 0; // Reset to first page
        }
        else {
            throw new Error(`Invalid page size: ${newPageSize}`);
        }
    }
    /**
     * Updates pagination data based on paginator event.
     * @param event MatPaginator event
     */
    updateFromPaginatorEvent(event) {
        this.pageIndex = event.pageIndex;
        this.pageSize = event.pageSize;
    }
}

/*
 * Public API Surface of acontplus-ui-components
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ActiveRequestsTracker, ColumnDefinition, CustomTabulatorComponent, DEFAULT_SNACKBAR_CONFIG, DYNAMIC_INPUT, DialogService, FieldDefinition, GetTotalPipe, IconUserComponent, MatCustomDialogComponent, MatDynamicTableComponent, MatInputChipComponent, MatThemeButtonComponent, OverlayService, Pagination, SNACKBAR_CONFIG, SNACKBAR_DURATIONS, SNACKBAR_ICONS, SNACKBAR_MESSAGES, SnackbarNotificationComponent, SnackbarService, SpinnerComponent, SvgIconComponent, TableCellIndex, ThemeService, ThemeToggleComponent, spinnerInterceptor, withoutSpinner };
//# sourceMappingURL=acontplus-ui-components.mjs.map
