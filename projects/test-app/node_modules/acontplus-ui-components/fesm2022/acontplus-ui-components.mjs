import * as i0 from '@angular/core';
import { Component, Injectable, InjectionToken, inject, signal } from '@angular/core';
import { MatProgressSpinner } from '@angular/material/progress-spinner';
import { ComponentPortal } from '@angular/cdk/portal';
import * as i1 from '@angular/cdk/overlay';
import { MatSnackBar } from '@angular/material/snack-bar';
import { BehaviorSubject } from 'rxjs';
import * as i1$1 from '@angular/material/card';
import { MatCardModule } from '@angular/material/card';
import { MatIcon } from '@angular/material/icon';
import { MatButton, MatIconButton } from '@angular/material/button';
import { MatFormField, MatInput, MatLabel } from '@angular/material/input';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { MatOption } from '@angular/material/core';
import { MatSelect } from '@angular/material/select';
import { AsyncPipe } from '@angular/common';
import { HttpContextToken, HttpContext } from '@angular/common/http';
import { finalize } from 'rxjs/operators';

const SNACKBAR_MESSAGES = {
    SUCCESS: {
        SAVE: 'Data saved successfully',
        DELETE: 'Item deleted successfully',
        UPDATE: 'Data updated successfully',
        UPLOAD: 'File uploaded successfully',
    },
    ERROR: {
        SAVE: 'Failed to save data',
        DELETE: 'Failed to delete item',
        UPDATE: 'Failed to update data',
        UPLOAD: 'Failed to upload file',
        NETWORK: 'Network error occurred',
        UNKNOWN: 'An unexpected error occurred',
    },
    WARNING: {
        UNSAVED_CHANGES: 'You have unsaved changes',
        SESSION_EXPIRING: 'Your session is about to expire',
        STORAGE_FULL: 'Storage is running low',
    },
    INFO: {
        LOADING: 'Loading data...',
        PROCESSING: 'Processing request...',
        MAINTENANCE: 'System maintenance scheduled',
    },
};
const SNACKBAR_DURATIONS = {
    SHORT: 3000,
    MEDIUM: 5000,
    LONG: 8000,
    PERSISTENT: 0,
};
const SNACKBAR_ICONS = {
    success: 'check_circle',
    error: 'error',
    warning: 'warning',
    info: 'info',
};

class SpinnerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SpinnerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: SpinnerComponent, isStandalone: true, selector: "apu-spinner", ngImport: i0, template: "<mat-spinner></mat-spinner>\r\n", styles: [":host{display:flex;justify-content:center;align-items:center;height:100%}\n"], dependencies: [{ kind: "component", type: MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SpinnerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'apu-spinner', imports: [MatProgressSpinner], template: "<mat-spinner></mat-spinner>\r\n", styles: [":host{display:flex;justify-content:center;align-items:center;height:100%}\n"] }]
        }] });

class OverlayService {
    constructor(overlay) {
        this.overlay = overlay;
    }
    showSpinner() {
        if (!this.overlayRef) {
            this.overlayRef = this.overlay.create({
                hasBackdrop: true,
                positionStrategy: this.overlay
                    .position()
                    .global()
                    .centerHorizontally()
                    .centerVertically(),
            });
            const spinnerPortal = new ComponentPortal(SpinnerComponent);
            this.overlayRef.attach(spinnerPortal);
        }
    }
    hideSpinner() {
        if (this.overlayRef) {
            this.overlayRef.detach();
            this.overlayRef = null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: OverlayService, deps: [{ token: i1.Overlay }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: OverlayService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: OverlayService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.Overlay }] });

const DEFAULT_SNACKBAR_CONFIG = {
    duration: 5000,
    horizontalPosition: 'center',
    verticalPosition: 'bottom',
    panelClass: [],
    defaultAction: 'Close',
    iconEnabled: true,
    titleEnabled: true,
};
const SNACKBAR_CONFIG = new InjectionToken('acontplus-snackbar-config', {
    providedIn: 'root',
    factory: () => DEFAULT_SNACKBAR_CONFIG,
});

class SnackbarService {
    constructor() {
        this.snackBar = inject(MatSnackBar);
        this.config = inject(SNACKBAR_CONFIG);
    }
    /**
     * Display a snackbar with specific type and configuration
     */
    show(props) {
        const { type, message, title, action = this.config.defaultAction, config: userConfig = {}, } = props;
        const typeClass = `acontplus-snackbar-${type}`;
        const panelClasses = this.buildPanelClasses(typeClass, userConfig.panelClass);
        const finalConfig = {
            ...this.config,
            ...userConfig,
            panelClass: panelClasses,
        };
        const displayMessage = this.buildMessage(message, title);
        this.snackBar.open(displayMessage, action, finalConfig);
    }
    /**
     * Quick success notification
     */
    success(props) {
        this.show({
            type: 'success',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.MEDIUM,
                ...props.config,
            },
        });
    }
    /**
     * Quick error notification with longer duration
     */
    error(props) {
        this.show({
            type: 'error',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.LONG,
                ...props.config,
            },
        });
    }
    /**
     * Quick warning notification
     */
    warning(props) {
        this.show({
            type: 'warning',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.MEDIUM,
                ...props.config,
            },
        });
    }
    /**
     * Quick info notification
     */
    info(props) {
        this.show({
            type: 'info',
            ...props,
            config: {
                duration: SNACKBAR_DURATIONS.MEDIUM,
                ...props.config,
            },
        });
    }
    buildPanelClasses(typeClass, userClasses) {
        const classes = ['acontplus-snackbar', typeClass];
        if (userClasses) {
            const normalizedClasses = Array.isArray(userClasses)
                ? userClasses
                : [userClasses];
            classes.push(...normalizedClasses);
        }
        return classes;
    }
    buildMessage(message, title) {
        if (!this.config.titleEnabled || !title) {
            return message;
        }
        return `${title}: ${message}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class ThemeService {
    constructor() {
        this._darkMode = new BehaviorSubject(false);
        this.isDarkMode$ = this._darkMode.asObservable();
    }
    loadMode() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            this._darkMode.next(savedTheme === 'dark');
            this.applyTheme(savedTheme === 'dark');
        }
        else {
            // Check system preference
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            this._darkMode.next(prefersDark);
            this.applyTheme(prefersDark);
        }
    }
    toggleDarkMode() {
        const newValue = !this._darkMode.value;
        this._darkMode.next(newValue);
        this.applyTheme(newValue);
        localStorage.setItem('theme', newValue ? 'dark' : 'light');
    }
    applyTheme(isDark) {
        if (isDark) {
            document.body.classList.add('dark-theme');
        }
        else {
            document.body.classList.remove('dark-theme');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class SnackbarNotificationComponent {
    constructor() {
        this.snackbarService = inject(SnackbarService);
        this.customNotification = signal({
            type: 'info',
            message: '',
            title: '',
            duration: 5000,
        });
        this.quickMessages = {
            success: SNACKBAR_MESSAGES.SUCCESS.SAVE,
            info: SNACKBAR_MESSAGES.INFO.LOADING,
            warning: SNACKBAR_MESSAGES.WARNING.UNSAVED_CHANGES,
            error: SNACKBAR_MESSAGES.ERROR.NETWORK,
        };
    }
    showQuickNotification(type) {
        this.snackbarService[type]({
            message: this.quickMessages[type],
            title: type.charAt(0).toUpperCase() + type.slice(1),
        });
    }
    showCustomNotification() {
        if (!this.isFormValid())
            return;
        const notification = this.customNotification();
        this.snackbarService.show({
            type: notification.type,
            message: notification.message,
            title: notification.title || undefined,
            config: { duration: notification.duration || 5000 },
        });
    }
    isFormValid() {
        return !!this.customNotification().message.trim();
    }
    resetForm() {
        this.customNotification.set({
            type: 'info',
            message: '',
            title: '',
            duration: 5000,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarNotificationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: SnackbarNotificationComponent, isStandalone: true, selector: "apu-snackbar-notification", ngImport: i0, template: "<div class=\"snackbar-demo-container\">\n  <!-- Quick Action Buttons -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>notifications</mat-icon>\n        Quick Notifications\n      </mat-card-title>\n      <mat-card-subtitle>\n        Test common notification scenarios\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <div class=\"quick-buttons\">\n        <button\n          mat-raised-button\n          color=\"primary\"\n          (click)=\"showQuickNotification('success')\"\n          class=\"notification-btn success-btn\"\n        >\n          <mat-icon>check_circle</mat-icon>\n          Success\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"accent\"\n          (click)=\"showQuickNotification('info')\"\n          class=\"notification-btn info-btn\"\n        >\n          <mat-icon>info</mat-icon>\n          Info\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('warning')\"\n          class=\"notification-btn warning-btn\"\n        >\n          <mat-icon>warning</mat-icon>\n          Warning\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('error')\"\n          class=\"notification-btn error-btn\"\n        >\n          <mat-icon>error</mat-icon>\n          Error\n        </button>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Custom Notification Builder -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>build</mat-icon>\n        Custom Notification Builder\n      </mat-card-title>\n      <mat-card-subtitle>\n        Create and test custom notifications\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <form class=\"notification-form\" (ngSubmit)=\"showCustomNotification()\">\n        <div class=\"form-row\">\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Type</mat-label>\n            <mat-select\n              [(ngModel)]=\"customNotification().type\"\n              name=\"type\"\n              required\n            >\n              <mat-option value=\"success\">Success</mat-option>\n              <mat-option value=\"info\">Info</mat-option>\n              <mat-option value=\"warning\">Warning</mat-option>\n              <mat-option value=\"error\">Error</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Duration (ms)</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              [(ngModel)]=\"customNotification().duration\"\n              name=\"duration\"\n              placeholder=\"5000\"\n              min=\"1000\"\n              max=\"30000\"\n            />\n          </mat-form-field>\n        </div>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Title (optional)</mat-label>\n          <input\n            matInput\n            [(ngModel)]=\"customNotification().title\"\n            name=\"title\"\n            placeholder=\"Notification title\"\n          />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Message</mat-label>\n          <textarea\n            matInput\n            [(ngModel)]=\"customNotification().message\"\n            name=\"message\"\n            placeholder=\"Your notification message...\"\n            rows=\"3\"\n            required\n          ></textarea>\n        </mat-form-field>\n\n        <div class=\"form-actions\">\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!isFormValid()\"\n            class=\"send-btn\"\n          >\n            <mat-icon>send</mat-icon>\n            Send Notification\n          </button>\n\n          <button\n            mat-button\n            type=\"button\"\n            (click)=\"resetForm()\"\n            class=\"reset-btn\"\n          >\n            <mat-icon>refresh</mat-icon>\n            Reset\n          </button>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Usage Examples -->\n  <!--  <mat-card class=\"demo-card\">-->\n  <!--    <mat-card-header>-->\n  <!--      <mat-card-title>-->\n  <!--        <mat-icon>code</mat-icon>-->\n  <!--        Usage Examples-->\n  <!--      </mat-card-title>-->\n  <!--    </mat-card-header>-->\n\n  <!--    <mat-card-content>-->\n  <!--      <div class=\"code-examples\">-->\n  <!--        <h4>Basic Usage:</h4>-->\n  <!--        <pre><code>{{ basicUsageExample() }}</code></pre>-->\n\n  <!--        <h4>With Configuration:</h4>-->\n  <!--        <pre><code>{{ advancedUsageExample() }}</code></pre>-->\n  <!--      </div>-->\n  <!--    </mat-card-content>-->\n  <!--  </mat-card>-->\n</div>\n", styles: [".snackbar-demo-container{padding:20px;max-width:800px;margin:0 auto;display:flex;flex-direction:column;gap:24px}.demo-card{border-radius:12px;box-shadow:0 4px 12px #0000001a}.demo-card mat-card-header{margin-bottom:16px}.demo-card mat-card-title{display:flex;align-items:center;gap:8px;font-size:1.2em}.quick-buttons{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:12px;margin-top:16px}.notification-btn{display:flex;align-items:center;gap:8px;padding:12px 16px;border-radius:8px;font-weight:500;transition:all .3s ease}.notification-btn:hover{transform:translateY(-2px);box-shadow:0 4px 12px #0003}.success-btn{background:linear-gradient(135deg,#4caf50,#66bb6a);color:#fff}.info-btn{background:linear-gradient(135deg,#2196f3,#42a5f5);color:#fff}.warning-btn{background:linear-gradient(135deg,#ff9800,#ffb74d);color:#fff}.error-btn{background:linear-gradient(135deg,#f44336,#ef5350);color:#fff}.notification-form{display:flex;flex-direction:column;gap:16px;margin-top:16px}.form-row{display:grid;grid-template-columns:1fr 1fr;gap:16px}.form-field{flex:1}.full-width{width:100%}.form-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px}.send-btn{background:linear-gradient(135deg,#1976d2,#1e88e5);color:#fff}.reset-btn{color:#666}.code-examples{background:#f5f5f5;border-radius:8px;padding:16px;margin-top:16px}.code-examples h4{margin:16px 0 8px;color:#333;font-size:.9em;font-weight:600}.code-examples h4:first-child{margin-top:0}.code-examples pre{background:#2d2d2d;color:#f8f8f2;padding:12px;border-radius:6px;overflow-x:auto;font-size:.85em;line-height:1.4}.code-examples code{font-family:Courier New,monospace}@media (max-width: 768px){.snackbar-demo-container{padding:16px}.form-row{grid-template-columns:1fr}.quick-buttons{grid-template-columns:repeat(2,1fr)}.form-actions{justify-content:stretch}.form-actions button{flex:1}}\n"], dependencies: [{ kind: "ngmodule", type: MatCardModule }, { kind: "component", type: i1$1.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i1$1.MatCardContent, selector: "mat-card-content" }, { kind: "component", type: i1$1.MatCardHeader, selector: "mat-card-header" }, { kind: "directive", type: i1$1.MatCardSubtitle, selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]" }, { kind: "directive", type: i1$1.MatCardTitle, selector: "mat-card-title, [mat-card-title], [matCardTitle]" }, { kind: "component", type: MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "directive", type: MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "component", type: MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth", "canSelectNullableOptions"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: SnackbarNotificationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'apu-snackbar-notification', imports: [
                        MatCardModule,
                        MatButton,
                        MatFormField,
                        MatInput,
                        MatLabel,
                        FormsModule,
                        MatOption,
                        MatSelect,
                        MatIcon,
                    ], template: "<div class=\"snackbar-demo-container\">\n  <!-- Quick Action Buttons -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>notifications</mat-icon>\n        Quick Notifications\n      </mat-card-title>\n      <mat-card-subtitle>\n        Test common notification scenarios\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <div class=\"quick-buttons\">\n        <button\n          mat-raised-button\n          color=\"primary\"\n          (click)=\"showQuickNotification('success')\"\n          class=\"notification-btn success-btn\"\n        >\n          <mat-icon>check_circle</mat-icon>\n          Success\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"accent\"\n          (click)=\"showQuickNotification('info')\"\n          class=\"notification-btn info-btn\"\n        >\n          <mat-icon>info</mat-icon>\n          Info\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('warning')\"\n          class=\"notification-btn warning-btn\"\n        >\n          <mat-icon>warning</mat-icon>\n          Warning\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('error')\"\n          class=\"notification-btn error-btn\"\n        >\n          <mat-icon>error</mat-icon>\n          Error\n        </button>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Custom Notification Builder -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>build</mat-icon>\n        Custom Notification Builder\n      </mat-card-title>\n      <mat-card-subtitle>\n        Create and test custom notifications\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <form class=\"notification-form\" (ngSubmit)=\"showCustomNotification()\">\n        <div class=\"form-row\">\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Type</mat-label>\n            <mat-select\n              [(ngModel)]=\"customNotification().type\"\n              name=\"type\"\n              required\n            >\n              <mat-option value=\"success\">Success</mat-option>\n              <mat-option value=\"info\">Info</mat-option>\n              <mat-option value=\"warning\">Warning</mat-option>\n              <mat-option value=\"error\">Error</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Duration (ms)</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              [(ngModel)]=\"customNotification().duration\"\n              name=\"duration\"\n              placeholder=\"5000\"\n              min=\"1000\"\n              max=\"30000\"\n            />\n          </mat-form-field>\n        </div>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Title (optional)</mat-label>\n          <input\n            matInput\n            [(ngModel)]=\"customNotification().title\"\n            name=\"title\"\n            placeholder=\"Notification title\"\n          />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Message</mat-label>\n          <textarea\n            matInput\n            [(ngModel)]=\"customNotification().message\"\n            name=\"message\"\n            placeholder=\"Your notification message...\"\n            rows=\"3\"\n            required\n          ></textarea>\n        </mat-form-field>\n\n        <div class=\"form-actions\">\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!isFormValid()\"\n            class=\"send-btn\"\n          >\n            <mat-icon>send</mat-icon>\n            Send Notification\n          </button>\n\n          <button\n            mat-button\n            type=\"button\"\n            (click)=\"resetForm()\"\n            class=\"reset-btn\"\n          >\n            <mat-icon>refresh</mat-icon>\n            Reset\n          </button>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Usage Examples -->\n  <!--  <mat-card class=\"demo-card\">-->\n  <!--    <mat-card-header>-->\n  <!--      <mat-card-title>-->\n  <!--        <mat-icon>code</mat-icon>-->\n  <!--        Usage Examples-->\n  <!--      </mat-card-title>-->\n  <!--    </mat-card-header>-->\n\n  <!--    <mat-card-content>-->\n  <!--      <div class=\"code-examples\">-->\n  <!--        <h4>Basic Usage:</h4>-->\n  <!--        <pre><code>{{ basicUsageExample() }}</code></pre>-->\n\n  <!--        <h4>With Configuration:</h4>-->\n  <!--        <pre><code>{{ advancedUsageExample() }}</code></pre>-->\n  <!--      </div>-->\n  <!--    </mat-card-content>-->\n  <!--  </mat-card>-->\n</div>\n", styles: [".snackbar-demo-container{padding:20px;max-width:800px;margin:0 auto;display:flex;flex-direction:column;gap:24px}.demo-card{border-radius:12px;box-shadow:0 4px 12px #0000001a}.demo-card mat-card-header{margin-bottom:16px}.demo-card mat-card-title{display:flex;align-items:center;gap:8px;font-size:1.2em}.quick-buttons{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:12px;margin-top:16px}.notification-btn{display:flex;align-items:center;gap:8px;padding:12px 16px;border-radius:8px;font-weight:500;transition:all .3s ease}.notification-btn:hover{transform:translateY(-2px);box-shadow:0 4px 12px #0003}.success-btn{background:linear-gradient(135deg,#4caf50,#66bb6a);color:#fff}.info-btn{background:linear-gradient(135deg,#2196f3,#42a5f5);color:#fff}.warning-btn{background:linear-gradient(135deg,#ff9800,#ffb74d);color:#fff}.error-btn{background:linear-gradient(135deg,#f44336,#ef5350);color:#fff}.notification-form{display:flex;flex-direction:column;gap:16px;margin-top:16px}.form-row{display:grid;grid-template-columns:1fr 1fr;gap:16px}.form-field{flex:1}.full-width{width:100%}.form-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px}.send-btn{background:linear-gradient(135deg,#1976d2,#1e88e5);color:#fff}.reset-btn{color:#666}.code-examples{background:#f5f5f5;border-radius:8px;padding:16px;margin-top:16px}.code-examples h4{margin:16px 0 8px;color:#333;font-size:.9em;font-weight:600}.code-examples h4:first-child{margin-top:0}.code-examples pre{background:#2d2d2d;color:#f8f8f2;padding:12px;border-radius:6px;overflow-x:auto;font-size:.85em;line-height:1.4}.code-examples code{font-family:Courier New,monospace}@media (max-width: 768px){.snackbar-demo-container{padding:16px}.form-row{grid-template-columns:1fr}.quick-buttons{grid-template-columns:repeat(2,1fr)}.form-actions{justify-content:stretch}.form-actions button{flex:1}}\n"] }]
        }] });

class ThemeToggleComponent {
    constructor(themeService) {
        this.themeService = themeService;
        this.darkMode$ = this.themeService.isDarkMode$;
    }
    toggleDarkMode() {
        this.themeService.toggleDarkMode();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeToggleComponent, deps: [{ token: ThemeService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.0.3", type: ThemeToggleComponent, isStandalone: true, selector: "apu-theme-toggle", ngImport: i0, template: "<button\n  mat-icon-button\n  (click)=\"toggleDarkMode()\"\n  title=\"{{ (darkMode$ | async) ? 'Modo D\u00EDa' : 'Modo Noche' }}\"\n>\n  <mat-icon>{{ (darkMode$ | async) ? \"light_mode\" : \"dark_mode\" }}</mat-icon>\n</button>\n", styles: [""], dependencies: [{ kind: "component", type: MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "pipe", type: AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ThemeToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'apu-theme-toggle', imports: [MatIconButton, MatIcon, AsyncPipe], template: "<button\n  mat-icon-button\n  (click)=\"toggleDarkMode()\"\n  title=\"{{ (darkMode$ | async) ? 'Modo D\u00EDa' : 'Modo Noche' }}\"\n>\n  <mat-icon>{{ (darkMode$ | async) ? \"light_mode\" : \"dark_mode\" }}</mat-icon>\n</button>\n" }]
        }], ctorParameters: () => [{ type: ThemeService }] });

/**
 * Token to determine if a request should show spinner
 * Default is true (show spinner for all requests)
 */
const SHOW_SPINNER = new HttpContextToken(() => true);
/**
 * Helper function to disable spinner for specific requests
 * @returns HttpContext with spinner disabled
 */
function withoutSpinner() {
    return new HttpContext().set(SHOW_SPINNER, false);
}
/**
 * Service to track active HTTP requests
 */
class ActiveRequestsTracker {
    constructor() {
        this.requests = [];
    }
    get count() {
        return this.requests.length;
    }
    add(request) {
        this.requests.push(request);
    }
    remove(request) {
        const index = this.requests.indexOf(request);
        if (index >= 0) {
            this.requests.splice(index, 1);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ActiveRequestsTracker, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ActiveRequestsTracker, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: ActiveRequestsTracker, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
/**
 * Interceptor that shows/hides a loading spinner based on active HTTP requests
 */
const spinnerInterceptor = (req, next) => {
    // Track active requests requiring spinner
    const activeRequests = inject(ActiveRequestsTracker);
    const overlayService = inject(OverlayService);
    // Skip spinner if disabled for this request
    if (!req.context.get(SHOW_SPINNER)) {
        return next(req);
    }
    // Add request to tracking
    activeRequests.add(req);
    // Show spinner if this is the first active request
    if (activeRequests.count === 1) {
        overlayService.showSpinner();
    }
    return next(req).pipe(finalize(() => {
        // Remove request and hide spinner if no more active requests
        activeRequests.remove(req);
        if (activeRequests.count === 0) {
            overlayService.hideSpinner();
        }
    }));
};

class FieldDefinition {
    constructor(options = {}) {
        this.controlType = 'textbox';
        this.type = 'string';
        this.value = options.value;
        this.valueLabel = options.valueLabel;
        this.defaultValue = options.defaultValue;
        this.defaultValueLabel = options.defaultValueLabel;
        this.key = options.key || '';
        this.label = options.label || '';
        this.dateRangeConfig = options.dateRangeConfig;
        this.isDefaultSearchField = options.isDefaultSearchField;
        this.required = !!options.required;
        this.disabled = options.disabled;
        this.order = options.order === undefined ? 1 : options.order;
        this.icon = options.icon;
        this.controlType = options.controlType || 'textbox';
        this.type = options.type || 'string';
        this.editor = options.editor || ''; // this attribut is for Kendo-Grid
        this.options = options.options || [];
        this.valueOptions = options.valueOptions || [];
        this.errorMessage = options.errorMessage || '';
        this.width = options.width;
        this.valueChangeCallback = options.valueChangeCallback || undefined;
    }
}

class ColumnDefinition extends FieldDefinition {
}

class TableCellIndex {
    constructor(row, column) {
        this.row = row;
        this.column = column;
    }
}

/*
 * Public API Surface of acontplus-ui-components
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ActiveRequestsTracker, ColumnDefinition, DEFAULT_SNACKBAR_CONFIG, FieldDefinition, OverlayService, SNACKBAR_CONFIG, SNACKBAR_DURATIONS, SNACKBAR_ICONS, SNACKBAR_MESSAGES, SnackbarNotificationComponent, SnackbarService, SpinnerComponent, TableCellIndex, ThemeService, ThemeToggleComponent, spinnerInterceptor, withoutSpinner };
//# sourceMappingURL=acontplus-ui-components.mjs.map
