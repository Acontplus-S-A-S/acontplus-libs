{"version":3,"file":"acontplus-ui-components.mjs","sources":["../../../projects/acontplus-ui-components/src/lib/constants/snackbar.constants.ts","../../../projects/acontplus-ui-components/src/lib/components/spinner/spinner.component.ts","../../../projects/acontplus-ui-components/src/lib/components/spinner/spinner.component.html","../../../projects/acontplus-ui-components/src/lib/services/overlay.service.ts","../../../projects/acontplus-ui-components/src/lib/services/snackbar/snackbar.config.ts","../../../projects/acontplus-ui-components/src/lib/services/snackbar/snackbar.service.ts","../../../projects/acontplus-ui-components/src/lib/services/theme.service.ts","../../../projects/acontplus-ui-components/src/lib/components/snackbar/snackbar-notification/snackbar-notification.component.ts","../../../projects/acontplus-ui-components/src/lib/components/snackbar/snackbar-notification/snackbar-notification.component.html","../../../projects/acontplus-ui-components/src/lib/components/theme-toggle/theme-toggle.component.ts","../../../projects/acontplus-ui-components/src/lib/components/theme-toggle/theme-toggle.component.html","../../../projects/acontplus-ui-components/src/lib/interceptors/spinner.interceptor.ts","../../../projects/acontplus-ui-components/src/lib/models/mat-table-models/field-definition.model.ts","../../../projects/acontplus-ui-components/src/lib/models/mat-table-models/column-definition.model.ts","../../../projects/acontplus-ui-components/src/lib/models/mat-table-models/table-cell-index.model.ts","../../../projects/acontplus-ui-components/src/public-api.ts","../../../projects/acontplus-ui-components/src/acontplus-ui-components.ts"],"sourcesContent":["import { SnackbarType } from '../models';\n\nexport const SNACKBAR_MESSAGES = {\n  SUCCESS: {\n    SAVE: 'Data saved successfully',\n    DELETE: 'Item deleted successfully',\n    UPDATE: 'Data updated successfully',\n    UPLOAD: 'File uploaded successfully',\n  },\n  ERROR: {\n    SAVE: 'Failed to save data',\n    DELETE: 'Failed to delete item',\n    UPDATE: 'Failed to update data',\n    UPLOAD: 'Failed to upload file',\n    NETWORK: 'Network error occurred',\n    UNKNOWN: 'An unexpected error occurred',\n  },\n  WARNING: {\n    UNSAVED_CHANGES: 'You have unsaved changes',\n    SESSION_EXPIRING: 'Your session is about to expire',\n    STORAGE_FULL: 'Storage is running low',\n  },\n  INFO: {\n    LOADING: 'Loading data...',\n    PROCESSING: 'Processing request...',\n    MAINTENANCE: 'System maintenance scheduled',\n  },\n} as const;\n\nexport const SNACKBAR_DURATIONS = {\n  SHORT: 3000,\n  MEDIUM: 5000,\n  LONG: 8000,\n  PERSISTENT: 0,\n} as const;\n\nexport const SNACKBAR_ICONS: Record<SnackbarType, string> = {\n  success: 'check_circle',\n  error: 'error',\n  warning: 'warning',\n  info: 'info',\n} as const;\n","import { Component } from '@angular/core';\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\n\n@Component({\n  selector: 'apu-spinner',\n  imports: [MatProgressSpinner],\n  templateUrl: './spinner.component.html',\n  styleUrl: './spinner.component.css',\n})\nexport class SpinnerComponent {}\n","<mat-spinner></mat-spinner>\r\n","import { Injectable } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { SpinnerComponent } from '../components';\n@Injectable({\n  providedIn: 'root',\n})\nexport class OverlayService {\n  private overlayRef!: OverlayRef;\n\n  constructor(private overlay: Overlay) {}\n\n  showSpinner() {\n    if (!this.overlayRef) {\n      this.overlayRef = this.overlay.create({\n        hasBackdrop: true,\n        positionStrategy: this.overlay\n          .position()\n          .global()\n          .centerHorizontally()\n          .centerVertically(),\n      });\n\n      const spinnerPortal = new ComponentPortal(SpinnerComponent);\n      this.overlayRef.attach(spinnerPortal);\n    }\n  }\n\n  hideSpinner() {\n    if (this.overlayRef) {\n      this.overlayRef.detach();\n      this.overlayRef = null!;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\r\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\r\n\r\nexport interface SnackbarConfig extends MatSnackBarConfig {\r\n  readonly defaultAction?: string;\r\n  readonly iconEnabled?: boolean;\r\n  readonly titleEnabled?: boolean;\r\n}\r\n\r\nexport const DEFAULT_SNACKBAR_CONFIG: SnackbarConfig = {\r\n  duration: 5000,\r\n  horizontalPosition: 'center',\r\n  verticalPosition: 'bottom',\r\n  panelClass: [],\r\n  defaultAction: 'Close',\r\n  iconEnabled: true,\r\n  titleEnabled: true,\r\n};\r\n\r\nexport const SNACKBAR_CONFIG = new InjectionToken<SnackbarConfig>(\r\n  'acontplus-snackbar-config',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => DEFAULT_SNACKBAR_CONFIG,\r\n  }\r\n);\r\n","import { inject, Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SNACKBAR_CONFIG } from './snackbar.config';\nimport { SNACKBAR_DURATIONS } from '../../constants';\nimport { NotificationCallProps, SnackbarProps } from '../../models';\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  private readonly snackBar = inject(MatSnackBar);\n  private readonly config = inject(SNACKBAR_CONFIG);\n\n  /**\n   * Display a snackbar with specific type and configuration\n   */\n  show(props: SnackbarProps): void {\n    const {\n      type,\n      message,\n      title,\n      action = this.config.defaultAction,\n      config: userConfig = {},\n    } = props;\n\n    const typeClass = `acontplus-snackbar-${type}`;\n    const panelClasses = this.buildPanelClasses(\n      typeClass,\n      userConfig.panelClass,\n    );\n\n    const finalConfig = {\n      ...this.config,\n      ...userConfig,\n      panelClass: panelClasses,\n    };\n\n    const displayMessage = this.buildMessage(message, title);\n    this.snackBar.open(displayMessage, action, finalConfig);\n  }\n\n  /**\n   * Quick success notification\n   */\n  success(props: NotificationCallProps): void {\n    this.show({\n      type: 'success',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.MEDIUM,\n        ...props.config,\n      },\n    });\n  }\n\n  /**\n   * Quick error notification with longer duration\n   */\n  error(props: NotificationCallProps): void {\n    this.show({\n      type: 'error',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.LONG,\n        ...props.config,\n      },\n    });\n  }\n\n  /**\n   * Quick warning notification\n   */\n  warning(props: NotificationCallProps): void {\n    this.show({\n      type: 'warning',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.MEDIUM,\n        ...props.config,\n      },\n    });\n  }\n\n  /**\n   * Quick info notification\n   */\n  info(props: NotificationCallProps): void {\n    this.show({\n      type: 'info',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.MEDIUM,\n        ...props.config,\n      },\n    });\n  }\n\n  private buildPanelClasses(\n    typeClass: string,\n    userClasses?: string | string[],\n  ): string[] {\n    const classes = ['acontplus-snackbar', typeClass];\n\n    if (userClasses) {\n      const normalizedClasses = Array.isArray(userClasses)\n        ? userClasses\n        : [userClasses];\n      classes.push(...normalizedClasses);\n    }\n\n    return classes;\n  }\n\n  private buildMessage(message: string, title?: string): string {\n    if (!this.config.titleEnabled || !title) {\n      return message;\n    }\n    return `${title}: ${message}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private readonly _darkMode = new BehaviorSubject<boolean>(false);\n  isDarkMode$ = this._darkMode.asObservable();\n\n  loadMode() {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      this._darkMode.next(savedTheme === 'dark');\n      this.applyTheme(savedTheme === 'dark');\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia(\n        '(prefers-color-scheme: dark)',\n      ).matches;\n      this._darkMode.next(prefersDark);\n      this.applyTheme(prefersDark);\n    }\n  }\n\n  toggleDarkMode(): void {\n    const newValue = !this._darkMode.value;\n    this._darkMode.next(newValue);\n    this.applyTheme(newValue);\n    localStorage.setItem('theme', newValue ? 'dark' : 'light');\n  }\n\n  private applyTheme(isDark: boolean): void {\n    if (isDark) {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  }\n}\n","import { Component, inject, signal } from '@angular/core';\nimport { SnackbarService } from '../../../services';\nimport { NotificationDemo, SnackbarType } from '../../../models';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatButton } from '@angular/material/button';\nimport { MatFormField, MatInput, MatLabel } from '@angular/material/input';\nimport { FormsModule } from '@angular/forms';\nimport { MatOption } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { SNACKBAR_MESSAGES } from '../../../constants';\n\n@Component({\n  selector: 'apu-snackbar-notification',\n  imports: [\n    MatCardModule,\n    MatButton,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    FormsModule,\n    MatOption,\n    MatSelect,\n    MatIcon,\n  ],\n  templateUrl: './snackbar-notification.component.html',\n  styleUrl: './snackbar-notification.component.css',\n})\nexport class SnackbarNotificationComponent {\n  private readonly snackbarService = inject(SnackbarService);\n\n  protected readonly customNotification = signal<NotificationDemo>({\n    type: 'info',\n    message: '',\n    title: '',\n    duration: 5000,\n  });\n\n  protected readonly quickMessages = {\n    success: SNACKBAR_MESSAGES.SUCCESS.SAVE,\n    info: SNACKBAR_MESSAGES.INFO.LOADING,\n    warning: SNACKBAR_MESSAGES.WARNING.UNSAVED_CHANGES,\n    error: SNACKBAR_MESSAGES.ERROR.NETWORK,\n  } as const;\n\n  protected showQuickNotification(type: SnackbarType): void {\n    this.snackbarService[type]({\n      message: this.quickMessages[type],\n      title: type.charAt(0).toUpperCase() + type.slice(1),\n    });\n  }\n\n  protected showCustomNotification(): void {\n    if (!this.isFormValid()) return;\n\n    const notification = this.customNotification();\n    this.snackbarService.show({\n      type: notification.type,\n      message: notification.message,\n      title: notification.title || undefined,\n      config: { duration: notification.duration || 5000 },\n    });\n  }\n\n  protected isFormValid(): boolean {\n    return !!this.customNotification().message.trim();\n  }\n\n  protected resetForm(): void {\n    this.customNotification.set({\n      type: 'info',\n      message: '',\n      title: '',\n      duration: 5000,\n    });\n  }\n}\n","<div class=\"snackbar-demo-container\">\n  <!-- Quick Action Buttons -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>notifications</mat-icon>\n        Quick Notifications\n      </mat-card-title>\n      <mat-card-subtitle>\n        Test common notification scenarios\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <div class=\"quick-buttons\">\n        <button\n          mat-raised-button\n          color=\"primary\"\n          (click)=\"showQuickNotification('success')\"\n          class=\"notification-btn success-btn\"\n        >\n          <mat-icon>check_circle</mat-icon>\n          Success\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"accent\"\n          (click)=\"showQuickNotification('info')\"\n          class=\"notification-btn info-btn\"\n        >\n          <mat-icon>info</mat-icon>\n          Info\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('warning')\"\n          class=\"notification-btn warning-btn\"\n        >\n          <mat-icon>warning</mat-icon>\n          Warning\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('error')\"\n          class=\"notification-btn error-btn\"\n        >\n          <mat-icon>error</mat-icon>\n          Error\n        </button>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Custom Notification Builder -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>build</mat-icon>\n        Custom Notification Builder\n      </mat-card-title>\n      <mat-card-subtitle>\n        Create and test custom notifications\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <form class=\"notification-form\" (ngSubmit)=\"showCustomNotification()\">\n        <div class=\"form-row\">\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Type</mat-label>\n            <mat-select\n              [(ngModel)]=\"customNotification().type\"\n              name=\"type\"\n              required\n            >\n              <mat-option value=\"success\">Success</mat-option>\n              <mat-option value=\"info\">Info</mat-option>\n              <mat-option value=\"warning\">Warning</mat-option>\n              <mat-option value=\"error\">Error</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Duration (ms)</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              [(ngModel)]=\"customNotification().duration\"\n              name=\"duration\"\n              placeholder=\"5000\"\n              min=\"1000\"\n              max=\"30000\"\n            />\n          </mat-form-field>\n        </div>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Title (optional)</mat-label>\n          <input\n            matInput\n            [(ngModel)]=\"customNotification().title\"\n            name=\"title\"\n            placeholder=\"Notification title\"\n          />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Message</mat-label>\n          <textarea\n            matInput\n            [(ngModel)]=\"customNotification().message\"\n            name=\"message\"\n            placeholder=\"Your notification message...\"\n            rows=\"3\"\n            required\n          ></textarea>\n        </mat-form-field>\n\n        <div class=\"form-actions\">\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!isFormValid()\"\n            class=\"send-btn\"\n          >\n            <mat-icon>send</mat-icon>\n            Send Notification\n          </button>\n\n          <button\n            mat-button\n            type=\"button\"\n            (click)=\"resetForm()\"\n            class=\"reset-btn\"\n          >\n            <mat-icon>refresh</mat-icon>\n            Reset\n          </button>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Usage Examples -->\n  <!--  <mat-card class=\"demo-card\">-->\n  <!--    <mat-card-header>-->\n  <!--      <mat-card-title>-->\n  <!--        <mat-icon>code</mat-icon>-->\n  <!--        Usage Examples-->\n  <!--      </mat-card-title>-->\n  <!--    </mat-card-header>-->\n\n  <!--    <mat-card-content>-->\n  <!--      <div class=\"code-examples\">-->\n  <!--        <h4>Basic Usage:</h4>-->\n  <!--        <pre><code>{{ basicUsageExample() }}</code></pre>-->\n\n  <!--        <h4>With Configuration:</h4>-->\n  <!--        <pre><code>{{ advancedUsageExample() }}</code></pre>-->\n  <!--      </div>-->\n  <!--    </mat-card-content>-->\n  <!--  </mat-card>-->\n</div>\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ThemeService } from '../../services';\nimport { MatIconButton } from '@angular/material/button';\nimport { AsyncPipe } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\n\n@Component({\n  selector: 'apu-theme-toggle',\n  imports: [MatIconButton, MatIcon, AsyncPipe],\n  templateUrl: './theme-toggle.component.html',\n  styleUrl: './theme-toggle.component.css',\n})\nexport class ThemeToggleComponent {\n  darkMode$: Observable<boolean>;\n\n  constructor(private themeService: ThemeService) {\n    this.darkMode$ = this.themeService.isDarkMode$;\n  }\n  toggleDarkMode(): void {\n    this.themeService.toggleDarkMode();\n  }\n}\n","<button\n  mat-icon-button\n  (click)=\"toggleDarkMode()\"\n  title=\"{{ (darkMode$ | async) ? 'Modo Día' : 'Modo Noche' }}\"\n>\n  <mat-icon>{{ (darkMode$ | async) ? \"light_mode\" : \"dark_mode\" }}</mat-icon>\n</button>\n","import {\n  HttpContext,\n  HttpContextToken,\n  HttpInterceptorFn,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\nimport { inject } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { OverlayService } from '../services';\n/**\n * Token to determine if a request should show spinner\n * Default is true (show spinner for all requests)\n */\nconst SHOW_SPINNER = new HttpContextToken<boolean>(() => true);\n\n/**\n * Helper function to disable spinner for specific requests\n * @returns HttpContext with spinner disabled\n */\nexport function withoutSpinner() {\n  return new HttpContext().set(SHOW_SPINNER, false);\n}\n\n/**\n * Service to track active HTTP requests\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveRequestsTracker {\n  private requests: HttpRequest<any>[] = [];\n\n  get count(): number {\n    return this.requests.length;\n  }\n\n  add(request: HttpRequest<any>): void {\n    this.requests.push(request);\n  }\n\n  remove(request: HttpRequest<any>): void {\n    const index = this.requests.indexOf(request);\n    if (index >= 0) {\n      this.requests.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Interceptor that shows/hides a loading spinner based on active HTTP requests\n */\nexport const spinnerInterceptor: HttpInterceptorFn = (req, next) => {\n  // Track active requests requiring spinner\n  const activeRequests = inject(ActiveRequestsTracker);\n  const overlayService = inject(OverlayService);\n\n  // Skip spinner if disabled for this request\n  if (!req.context.get(SHOW_SPINNER)) {\n    return next(req);\n  }\n\n  // Add request to tracking\n  activeRequests.add(req);\n\n  // Show spinner if this is the first active request\n  if (activeRequests.count === 1) {\n    overlayService.showSpinner();\n  }\n\n  return next(req).pipe(\n    finalize(() => {\n      // Remove request and hide spinner if no more active requests\n      activeRequests.remove(req);\n      if (activeRequests.count === 0) {\n        overlayService.hideSpinner();\n      }\n    }),\n  );\n};\n","export class FieldDefinition {\r\n  // <T>\r\n  value?: any; // T\r\n  valueLabel?: any;\r\n  defaultValue?: any;\r\n  defaultValueLabel?: any;\r\n  key: string;\r\n  label: string;\r\n  dateRangeConfig?: DateRangeConfig;\r\n  isDefaultSearchField?: boolean;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  order?: number;\r\n  icon?: string;\r\n  controlType?: ControlType = 'textbox';\r\n  type?: FieldType = 'string';\r\n  editor?: 'numeric' | 'boolean' | ''; // this attribut is for Kendo-Grid\r\n  options?: any[]; // { label: string, value: string | number }[]\r\n  valueOptions?: string[];\r\n  valuePrimitive?: boolean; // for kendo dropdown\r\n  textField?: string; // for kendo dropdown\r\n  valueField?: string; // for kendo dropdown\r\n  errorMessage?: string;\r\n  width?: string;\r\n  valueChangeCallback?: Function;\r\n\r\n  constructor(\r\n    options: {\r\n      value?: any; // T\r\n      valueLabel?: any;\r\n      defaultValue?: any;\r\n      defaultValueLabel?: any;\r\n      key?: string;\r\n      label?: string;\r\n      dateRangeConfig?: DateRangeConfig;\r\n      isDefaultSearchField?: boolean;\r\n      required?: boolean;\r\n      disabled?: boolean;\r\n      order?: number;\r\n      icon?: string;\r\n      controlType?: ControlType;\r\n      type?: FieldType;\r\n      editor?: 'numeric' | 'boolean'; // this attribut is for Kendo-Grid\r\n      options?: any[]; // { label: string, value: string | number }[]\r\n      valueOptions?: string[];\r\n      errorMessage?: string;\r\n      width?: string;\r\n      valueChangeCallback?: Function;\r\n    } = {},\r\n  ) {\r\n    this.value = options.value;\r\n    this.valueLabel = options.valueLabel;\r\n    this.defaultValue = options.defaultValue;\r\n    this.defaultValueLabel = options.defaultValueLabel;\r\n    this.key = options.key || '';\r\n    this.label = options.label || '';\r\n    this.dateRangeConfig = options.dateRangeConfig;\r\n    this.isDefaultSearchField = options.isDefaultSearchField;\r\n    this.required = !!options.required;\r\n    this.disabled = options.disabled;\r\n    this.order = options.order === undefined ? 1 : options.order;\r\n    this.icon = options.icon;\r\n    this.controlType = options.controlType || 'textbox';\r\n    this.type = options.type || 'string';\r\n    this.editor = options.editor || ''; // this attribut is for Kendo-Grid\r\n    this.options = options.options || [];\r\n    this.valueOptions = options.valueOptions || [];\r\n    this.errorMessage = options.errorMessage || '';\r\n    this.width = options.width;\r\n    this.valueChangeCallback = options.valueChangeCallback || undefined;\r\n  }\r\n}\r\n\r\nexport interface DateRangeConfig {\r\n  startDate: FieldDefinition;\r\n  endDate: FieldDefinition;\r\n}\r\n\r\nexport declare type ControlType =\r\n  | 'textbox'\r\n  | 'ktextbox'\r\n  | 'combobox'\r\n  | 'textboxNum'\r\n  | 'dropdown'\r\n  | 'dropdownlist'\r\n  | 'multiselect'\r\n  | 'autocomplete'\r\n  | 'checkbox'\r\n  | 'radiobutton'\r\n  | 'inquiryInDialog'\r\n  | 'timepicker'\r\n  | 'datepicker'\r\n  | 'daterange'\r\n  | 'textarea'\r\n  | 'slideToggle'\r\n  | 'slider'\r\n  | 'switch'\r\n  | 'buttonToggleGroup'; // checkboxGroup colorpicker button\r\n\r\nexport declare type FieldType =\r\n  | 'number'\r\n  | 'string'\r\n  | 'boolean'\r\n  | 'date'\r\n  | 'month'\r\n  | 'email'\r\n  | 'password'\r\n  | 'tel'\r\n  | 'hidden'\r\n  | 'image'\r\n  | 'url'\r\n  | 'week'\r\n  | 'search'\r\n  | 'reset';\r\n","import { FieldDefinition } from './field-definition.model';\r\n\r\nexport class ColumnDefinition extends FieldDefinition {\r\n  index?: number; // if the list of columns will be displayed in material edit-grid (angular material grid), index must be given\r\n  format?: any; // it could be: { style: 'currency', currency: 'EUR' }, { date: 'short' }\r\n  hasFooter?: boolean;\r\n  hideInOverlay?: boolean;\r\n\r\n  // optionsAttribut is used in stock-receipt maintenance: StockReceiptItem.Unit has options for StockReceiptItem.Birimi\r\n  optionsAttribut?: string; // name of the attribut that has the options list for dropdown\r\n}\r\n","export class TableCellIndex {\r\n    row: number;\r\n    column: number;\r\n\r\n    constructor(row: number, column: number) {\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n}\r\n","/*\n * Public API Surface of acontplus-ui-components\n */\n\nexport * from './lib/constants';\nexport * from './lib/components';\nexport * from './lib/interceptors';\nexport * from './lib/models';\nexport * from './lib/services';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i1.ThemeService"],"mappings":"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"}