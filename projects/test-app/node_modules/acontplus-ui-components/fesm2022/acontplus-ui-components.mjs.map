{"version":3,"file":"acontplus-ui-components.mjs","sources":["../../../projects/acontplus-ui-components/src/lib/constants/snackbar.constants.ts","../../../projects/acontplus-ui-components/src/lib/components/mat-theme-button/mat-theme-button.component.ts","../../../projects/acontplus-ui-components/src/lib/components/mat-theme-button/mat-theme-button.component.html","../../../projects/acontplus-ui-components/src/lib/components/mat-custom-dialog/mat-custom-dialog.component.ts","../../../projects/acontplus-ui-components/src/lib/components/mat-custom-dialog/mat-custom-dialog.component.html","../../../projects/acontplus-ui-components/src/lib/components/tables/custom-tabulator/custom-tabulator.component.ts","../../../projects/acontplus-ui-components/src/lib/components/tables/custom-tabulator/custom-tabulator.component.html","../../../projects/acontplus-ui-components/src/lib/pipes/get-total.pipe.ts","../../../projects/acontplus-ui-components/src/lib/inputs/dynamic-input.ts","../../../projects/acontplus-ui-components/src/lib/components/tables/mat-dynamic-table/mat-dynamic-table.component.ts","../../../projects/acontplus-ui-components/src/lib/components/tables/mat-dynamic-table/mat-dynamic-table.component.html","../../../projects/acontplus-ui-components/src/lib/components/mat-input-chip/mat-input-chip.component.ts","../../../projects/acontplus-ui-components/src/lib/components/mat-input-chip/mat-input-chip.component.html","../../../projects/acontplus-ui-components/src/lib/components/spinner/spinner.component.ts","../../../projects/acontplus-ui-components/src/lib/components/spinner/spinner.component.html","../../../projects/acontplus-ui-components/src/lib/services/overlay.service.ts","../../../projects/acontplus-ui-components/src/lib/services/snackbar/snackbar.config.ts","../../../projects/acontplus-ui-components/src/lib/services/snackbar/snackbar.service.ts","../../../projects/acontplus-ui-components/src/lib/services/theme.service.ts","../../../projects/acontplus-ui-components/src/lib/components/snackbar/snackbar-notification/snackbar-notification.component.ts","../../../projects/acontplus-ui-components/src/lib/components/snackbar/snackbar-notification/snackbar-notification.component.html","../../../projects/acontplus-ui-components/src/lib/components/theme-toggle/theme-toggle.component.ts","../../../projects/acontplus-ui-components/src/lib/components/theme-toggle/theme-toggle.component.html","../../../projects/acontplus-ui-components/src/lib/interceptors/spinner.interceptor.ts","../../../projects/acontplus-ui-components/src/lib/models/mat-table-models/field-definition.model.ts","../../../projects/acontplus-ui-components/src/lib/models/mat-table-models/column-definition.model.ts","../../../projects/acontplus-ui-components/src/lib/models/mat-table-models/table-cell-index.model.ts","../../../projects/acontplus-ui-components/src/lib/models/pagination.model.ts","../../../projects/acontplus-ui-components/src/public-api.ts","../../../projects/acontplus-ui-components/src/acontplus-ui-components.ts"],"sourcesContent":["import { SnackbarType } from '../models';\n\nexport const SNACKBAR_MESSAGES = {\n  SUCCESS: {\n    SAVE: 'Data saved successfully',\n    DELETE: 'Item deleted successfully',\n    UPDATE: 'Data updated successfully',\n    UPLOAD: 'File uploaded successfully',\n  },\n  ERROR: {\n    SAVE: 'Failed to save data',\n    DELETE: 'Failed to delete item',\n    UPDATE: 'Failed to update data',\n    UPLOAD: 'Failed to upload file',\n    NETWORK: 'Network error occurred',\n    UNKNOWN: 'An unexpected error occurred',\n  },\n  WARNING: {\n    UNSAVED_CHANGES: 'You have unsaved changes',\n    SESSION_EXPIRING: 'Your session is about to expire',\n    STORAGE_FULL: 'Storage is running low',\n  },\n  INFO: {\n    LOADING: 'Loading data...',\n    PROCESSING: 'Processing request...',\n    MAINTENANCE: 'System maintenance scheduled',\n  },\n} as const;\n\nexport const SNACKBAR_DURATIONS = {\n  SHORT: 3000,\n  MEDIUM: 5000,\n  LONG: 8000,\n  PERSISTENT: 0,\n} as const;\n\nexport const SNACKBAR_ICONS: Record<SnackbarType, string> = {\n  success: 'check_circle',\n  error: 'error',\n  warning: 'warning',\n  info: 'info',\n} as const;\n","import { Component, input, output } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport {\n  MatButton,\n  MatFabButton,\n  MatIconButton,\n  MatMiniFabButton,\n} from '@angular/material/button';\nimport { NgClass } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\n\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark';\n\nexport type ButtonType = 'button' | 'submit' | 'reset';\n\nexport type MaterialButtonStyle =\n  | 'basic' // mat-button\n  | 'raised' // mat-raised-button\n  | 'flat' // mat-flat-button\n  | 'stroked' // mat-stroked-button\n  | 'icon' // mat-icon-button\n  | 'fab' // mat-fab\n  | 'mini-fab'; // mat-mini-fab\n\n@Component({\n  selector: 'acp-mat-theme-button',\n  imports: [\n    MatButton,\n    NgClass,\n    MatIcon,\n    MatMiniFabButton,\n    MatIconButton,\n    MatFabButton,\n  ],\n  templateUrl: './mat-theme-button.component.html',\n  styleUrl: './mat-theme-button.component.css',\n})\nexport class MatThemeButtonComponent {\n  variant = input<ButtonVariant>('primary');\n  text = input<string>('');\n  icon = input<string>('');\n  outlined = input<boolean>(false);\n  disabled = input<boolean>(false);\n  useThemeColor = input<boolean>(false); // Use theme color based on variant\n  type = input<ButtonType>('button');\n  matStyle = input<MaterialButtonStyle>('raised');\n\n  // Additional common button properties\n  title = input<string>(''); // Tooltip text shown on hover\n  ariaLabel = input<string>(''); // Accessibility label\n  name = input<string>(''); // Name attribute for form submission\n  id = input<string>(''); // ID for element reference\n  form = input<string>(''); // Associated form ID\n  tabIndex = input<number>(0); // Tab order\n  testId = input<string>(''); // For testing purposes\n\n  handleClick = output<unknown>();\n\n  getButtonClasses(): Record<string, boolean> {\n    return {\n      [`btn-${this.variant()}`]: true,\n      'btn-outlined': this.outlined() && this.matStyle() !== 'stroked', // Stroked buttons are already outlined\n    };\n  }\n\n  getThemeColor(): ThemePalette | null {\n    if (!this.useThemeColor) return null;\n\n    switch (this.variant()) {\n      case 'primary':\n        return 'primary';\n      case 'secondary':\n        return 'accent';\n      case 'danger':\n        return 'warn';\n      default:\n        return null;\n    }\n  }\n}\n","@if (matStyle() === \"basic\") {\n  <button\n    mat-button\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    @if (icon()) {\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\n    }\n    @if (text()) {\n      <span class=\"button-text\">{{ text() }}</span>\n    }\n    <ng-content></ng-content>\n  </button>\n} @else if (matStyle() === \"raised\") {\n  <button\n    mat-raised-button\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    <ng-content select=\"svgIcon\"></ng-content>\n    @if (icon()) {\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\n    }\n    @if (text()) {\n      <span class=\"button-text\">{{ text() }}</span>\n    }\n    <ng-content></ng-content>\n  </button>\n} @else if (matStyle() === \"flat\") {\n  <button\n    mat-flat-button\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    @if (icon()) {\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\n    }\n    @if (text()) {\n      <span class=\"button-text\">{{ text() }}</span>\n    }\n    <ng-content></ng-content>\n  </button>\n} @else if (matStyle() === \"stroked\") {\n  <button\n    mat-stroked-button\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    @if (icon()) {\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\n    }\n    @if (text()) {\n      <span class=\"button-text\">{{ text() }}</span>\n    }\n    <ng-content></ng-content>\n  </button>\n} @else if (matStyle() === \"icon\") {\n  <button\n    mat-icon-button\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    @if (icon()) {\n      <mat-icon>{{ icon() }}</mat-icon>\n    }\n    <ng-content></ng-content>\n  </button>\n} @else if (matStyle() === \"fab\") {\n  <button\n    mat-fab\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    @if (icon()) {\n      <mat-icon>{{ icon() }}</mat-icon>\n    }\n    @if (text()) {\n      <span class=\"button-text\">{{ text() }}</span>\n    }\n    <ng-content></ng-content>\n  </button>\n} @else if (matStyle() === \"mini-fab\") {\n  <button\n    mat-mini-fab\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    @if (icon()) {\n      <mat-icon>{{ icon() }}</mat-icon>\n    }\n    <ng-content></ng-content>\n  </button>\n} @else {\n  <button\n    mat-raised-button\n    [ngClass]=\"getButtonClasses()\"\n    [disabled]=\"disabled()\"\n    [color]=\"getThemeColor()\"\n    [type]=\"type()\"\n    [title]=\"title()\"\n    [attr.aria-label]=\"ariaLabel() || title()\"\n    [attr.name]=\"name()\"\n    [attr.id]=\"id()\"\n    [attr.form]=\"form()\"\n    [attr.tabindex]=\"tabIndex()\"\n    [attr.data-testid]=\"testId()\"\n    (click)=\"handleClick.emit($event)\"\n  >\n    <ng-content select=\"svgIcon\"></ng-content>\n\n    @if (icon()) {\n      <mat-icon class=\"button-icon\">{{ icon() }}</mat-icon>\n    }\n    @if (text()) {\n      <span class=\"button-text\">{{ text() }}</span>\n    }\n    <ng-content></ng-content>\n  </button>\n}\n","import { OverlayContainer } from '@angular/cdk/overlay';\nimport {\n  Component,\n  ElementRef,\n  inject,\n  Input,\n  input,\n  output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  MatDialogActions,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\nimport { CdkDrag, CdkDragHandle } from '@angular/cdk/drag-drop';\nimport { MatThemeButtonComponent } from '../mat-theme-button/mat-theme-button.component';\nimport { MatIconButton } from '@angular/material/button';\n\nexport interface MatCustomDialogOptions {\n  showButtonClose?: boolean | true | false;\n}\n\n@Component({\n  selector: 'acp-mat-custom-dialog',\n  imports: [\n    MatIcon,\n    MatDialogContent,\n    MatProgressSpinner,\n    MatDialogTitle,\n    CdkDrag,\n    CdkDragHandle,\n    MatDialogActions,\n    MatThemeButtonComponent,\n    MatIconButton,\n  ],\n  templateUrl: './mat-custom-dialog.component.html',\n  styleUrl: './mat-custom-dialog.component.css',\n})\nexport class MatCustomDialogComponent {\n  showHeader = input(true);\n  loading = input(false);\n  align = input<'start' | 'center' | 'end'>('end');\n  title = input('');\n  icon = input('');\n  options = input<MatCustomDialogOptions>({\n    showButtonClose: true,\n  });\n  close = output();\n\n  @ViewChild('dialogHeader', { static: true }) header!: ElementRef;\n\n  private static lastZIndex = 1000;\n\n  toTop() {\n    const pane = this.header.nativeElement.closest(\n      '.cdk-overlay-pane',\n    ) as HTMLElement;\n    if (pane) {\n      pane.style.zIndex = (++MatCustomDialogComponent.lastZIndex).toString();\n    }\n  }\n}\n","@if (showHeader()) {\n  <div class=\"m3-dialog-header\">\n    <h6\n      mat-dialog-title\n      cdkDrag\n      cdkDragRootElement=\".cdk-overlay-pane\"\n      cdkDragHandle\n      #dialogHeader\n      (mousedown)=\"toTop()\"\n    >\n      @if (icon()) {\n        <mat-icon\n          aria-hidden=\"false\"\n          aria-label=\"Dialog Icon\"\n          fontIcon=\"{{ icon() }}\"\n        ></mat-icon>\n      }\n\n      {{ title() }}\n\n      <button\n        type=\"button\"\n        mat-icon-button\n        class=\"close-button\"\n        (click)=\"close.emit()\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n    </h6>\n  </div>\n}\n\n<mat-dialog-content class=\"mat-typography\">\n  @if (loading()) {\n    <div class=\"loading-overlay\">\n      <mat-spinner></mat-spinner>\n    </div>\n  }\n  <ng-content />\n</mat-dialog-content>\n<mat-dialog-actions [align]=\"align()\">\n  <ng-content />\n  @if (this.options().showButtonClose) {\n    <acp-mat-theme-button\n      variant=\"dark\"\n      icon=\"close\"\n      ariaLabel=\"Close Dialog Button\"\n      text=\"Cerrar\"\n      matStyle=\"raised\"\n      (handleClick)=\"close.emit()\"\n    />\n  }\n</mat-dialog-actions>\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-custom-tabulator',\r\n  imports: [],\r\n  templateUrl: './custom-tabulator.component.html',\r\n  styleUrl: './custom-tabulator.component.css'\r\n})\r\nexport class CustomTabulatorComponent {\r\n\r\n}\r\n","<p>custom-tabulator works!</p>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'getTotal',\r\n  standalone: true,\r\n})\r\nexport class GetTotalPipe implements PipeTransform {\r\n  transform(colName: string, dataSource: any[]): any {\r\n    return this.getTotal(colName, dataSource) || '';\r\n  }\r\n\r\n  /**\r\n   * Calculate and return the total (sum) of all the column --> the column must be number\r\n   */\r\n  getTotal(colName: string, dataSource: any[]): number {\r\n    const total = dataSource\r\n      .map((row) => row[colName])\r\n      .reduce((acc, value) => (value ? acc + Number(value) : acc), 0);\r\n    return total?.toFixed(2);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\n/*\n  InjectionToken is a generic class provided by Angular for creating custom injection tokens.\n*/\nexport const DYNAMIC_INPUT = new InjectionToken('DYNAMIC_INPUT');\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  EmbeddedViewRef,\n  EventEmitter,\n  inject,\n  Injector,\n  input,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  output,\n  Output,\n  QueryList,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ColumnDefinition, Pagination, TableCellIndex } from '../../../models';\nimport {\n  MatColumnDef,\n  MatFooterRowDef,\n  MatHeaderRowDef,\n  MatNoDataRow,\n  MatRowDef,\n  MatTable,\n  MatTableDataSource,\n  MatTableModule,\n} from '@angular/material/table';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\nimport {\n  DatePipe,\n  DecimalPipe,\n  NgClass,\n  NgComponentOutlet,\n  NgTemplateOutlet,\n} from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSortModule } from '@angular/material/sort';\nimport { GetTotalPipe } from '../../../pipes';\nimport { DYNAMIC_INPUT } from '../../../inputs';\n\n@Component({\n  selector: 'acp-mat-dynamic-table',\n  imports: [\n    MatTableModule,\n    MatCheckboxModule,\n    MatSortModule,\n    MatIconModule,\n    MatButtonModule,\n    MatPaginatorModule,\n    NgClass,\n    GetTotalPipe,\n    DatePipe,\n    DecimalPipe,\n    NgTemplateOutlet,\n    NgComponentOutlet,\n  ],\n  templateUrl: './mat-dynamic-table.component.html',\n  styleUrl: './mat-dynamic-table.component.css',\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed,void', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition(\n        'expanded <=> collapsed',\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'),\n      ),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDynamicTableComponent<T>\n  implements AfterContentInit, OnChanges, OnInit, OnDestroy\n{\n  private viewContainerRef = inject(ViewContainerRef);\n  private injector = inject(Injector);\n  private embeddedViews: EmbeddedViewRef<any>[] = [];\n\n  @Input() showExpand = false;\n  @Input() showFooter: boolean = false;\n  @Input() locale: string = '';\n  @Input() highlightRowIndex: number = 0;\n\n  @Input() visibleColumns: string[] = [];\n  @Input() columnDefinitions: ColumnDefinition[] = [];\n\n  columnsToDisplayWithExpand = this.showExpand\n    ? [...this.visibleColumns, 'expand']\n    : this.visibleColumns;\n\n  @Input() showSelectBox: boolean = false;\n  @Input() tableData: T[] = [];\n  @Output() rowSelected = new EventEmitter<T[]>();\n  @Output() copyRow = new EventEmitter<T>();\n  showExpanded = output<T>();\n  hideExpanded = output<T>();\n\n  dataSource = new MatTableDataSource<T>([]);\n  selection: SelectionModel<T> = new SelectionModel<T>(true, []);\n\n  @ContentChildren(MatHeaderRowDef) headerRowDefs!: QueryList<MatHeaderRowDef>;\n  @ContentChildren(MatRowDef) rowDefs!: QueryList<MatRowDef<T>>;\n  @ContentChildren(MatFooterRowDef) footerRowDefs!: QueryList<MatFooterRowDef>;\n  @ContentChildren(MatColumnDef) columnDefs!: QueryList<MatColumnDef>;\n  @ContentChild(MatNoDataRow) noDataRow!: MatNoDataRow;\n\n  @ViewChild(MatTable, { static: true }) table!: MatTable<T>;\n\n  // @ViewChildren('matrow', { read: ViewContainerRef })\n  @ContentChildren(ViewContainerRef)\n  rows!: QueryList<ViewContainerRef>;\n  // Query for ViewContainerRefs\n\n  @Input() templateOp!: any | null;\n  @Input() expandedDetail!: any | null;\n\n  expandedElement!: T | null;\n\n  enablePagination = input(false);\n  pageEvent = output<PageEvent>();\n  paginationConfig = input<Pagination>();\n\n  handlePageEvent(e: PageEvent) {\n    this.pageEvent.emit(e);\n  }\n\n  isLoadingData = input<boolean>(false);\n\n  ngAfterContentInit(): void {\n    this.columnDefs.forEach((columnDef) => this.table.addColumnDef(columnDef));\n    this.rowDefs.forEach((rowDef) => this.table.addRowDef(rowDef));\n    this.headerRowDefs.forEach((headerRowDef) =>\n      this.table.addHeaderRowDef(headerRowDef),\n    );\n\n    if (this.showFooter) {\n      this.footerRowDefs.forEach((footerRowDef) =>\n        this.table.addFooterRowDef(footerRowDef),\n      );\n    } else {\n      this.footerRowDefs.forEach((footerRowDef) =>\n        this.table.removeFooterRowDef(footerRowDef),\n      );\n    }\n    // init grid state\n    this.selection = new SelectionModel<T>(true, []);\n    this.table.setNoDataRow(this.noDataRow);\n  }\n\n  ngOnInit(): void {\n    if (!this.visibleColumns) {\n      this.visibleColumns = this.columnDefinitions.map((col) => col.key);\n      this.columnDefinitions.forEach((col, index) => (col.index = index));\n    }\n\n    if (this.showSelectBox && this.visibleColumns.indexOf('select') < 0) {\n      this.visibleColumns = ['select', ...this.visibleColumns];\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['tableData']?.currentValue && changes['tableData']) {\n      this.dataSource = new MatTableDataSource<T>(this.tableData);\n    }\n  }\n\n  public createInjector = (element: any): Injector =>\n    Injector.create({\n      providers: [\n        {\n          //please note that the STATUS_INPUT is a token that we define in the status-input.ts file\n          provide: DYNAMIC_INPUT,\n          // here we pass the element that we want to use\n          useValue: element,\n        },\n      ],\n      parent: this.injector,\n    });\n\n  createEmbeddedView(column: any, element: any): void {\n    console.log(column);\n    const templateRef = column.body as TemplateRef<any>;\n\n    // Create context for the template\n    const context = {\n      $implicit: element,\n      ...column.body,\n    };\n\n    // Create the embedded view\n    const viewRef = templateRef.createEmbeddedView(context);\n    this.embeddedViews.push(viewRef);\n\n    // Attach to the view container\n    this.viewContainerRef.insert(viewRef);\n  }\n\n  moveNextRow(cell: TableCellIndex): void {\n    console.log('moveNextRow(): ' + JSON.stringify(cell));\n  }\n\n  selectRow(row: T): void {\n    // this.rowSelected.emit(row);\n    this.rowSelected.emit(this.selection.selected);\n  }\n\n  // ----START CHECKBOX LOGIC\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected(): boolean {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle(): void {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.dataSource.data.forEach((row) => this.selection.select(row));\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: T): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row`; //  ${row.id + 1}\n  }\n\n  // ----END CHECKBOX LOGIC\n\n  showElement(index: number, height: number): void {\n    const row = this.rows.toArray()[index]; // .find(row => row.element.nativeElement.getAttribute('position') === indexstr);\n    if (row != null) {\n      const rect = row.element.nativeElement.getBoundingClientRect();\n      if (rect.y <= 0 || rect.y + rect.height > height) {\n        row.element.nativeElement.scrollIntoView(false, {\n          behavior: 'instant',\n        });\n      }\n      return;\n    }\n    console.log('not found');\n  }\n\n  onHighlightedRowChange(event: KeyboardEvent): void {\n    // let rect     = event.target.getBoundingClientRect();\n    let focused = this.dataSource.data[this.highlightRowIndex];\n    const x: number = this.dataSource.data.indexOf(focused);\n    const l: number = this.dataSource.data.length;\n    if (event.keyCode === 38) {\n      // Up\n      if (x > 0) {\n        focused = this.dataSource.data[x - 1];\n      }\n    } else if (event.keyCode === 40) {\n      // Down\n      if (x < l - 1) {\n        focused = this.dataSource.data[x + 1];\n      }\n    }\n    if (focused != null) {\n      this.showElement(this.highlightRowIndex, 35); // $table-row-height = 35px // rect.height\n    }\n  }\n\n  getRowColor(element: any): string {\n    return element.colorRow ? element.colorRow : ''; // Return empty string if no color is defined\n  }\n\n  onExpand($event: any, element: T) {\n    $event.stopPropagation();\n    this.expandedElement = this.expandedElement === element ? null : element;\n    if (this.expandedElement) {\n      this.showExpanded.emit(element);\n    } else {\n      this.hideExpanded.emit(element);\n    }\n  }\n\n  ngOnDestroy(): void {\n    // Clean up components and views to prevent memory leaks\n    this.embeddedViews.forEach((view) => view.destroy());\n  }\n}\n","<div class=\"mat-table-container\">\n  <!--  <app-custom-mat-spinner [isLoadingResults]=\"isLoadingData()\" />-->\n  <div class=\"table-container small-table\">\n    <table #sort=\"matSort\" [dataSource]=\"dataSource.data\" mat-table matSort>\n      <!-- (matSortChange)=\"sortData($event)\" -->\n\n      @if (columnDefinitions) {\n        <!-- Checkbox Column (optional) -->\n        <ng-container matColumnDef=\"select\">\n          <th *matHeaderCellDef mat-header-cell>\n            <mat-checkbox\n              (change)=\"$event ? masterToggle() : null\"\n              (click)=\"$event.stopPropagation()\"\n              [aria-label]=\"checkboxLabel()\"\n              [checked]=\"selection.hasValue() && isAllSelected()\"\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n            >\n            </mat-checkbox>\n          </th>\n          <td *matCellDef=\"let row\" mat-cell>\n            <mat-checkbox\n              (change)=\"$event ? selection.toggle(row) : null; selectRow(row)\"\n              (click)=\"$event.stopPropagation()\"\n              [aria-label]=\"checkboxLabel(row)\"\n              [checked]=\"selection.isSelected(row)\"\n            >\n            </mat-checkbox>\n          </td>\n          <td *matFooterCellDef mat-footer-cell></td>\n        </ng-container>\n\n        <!-- Dynamic columns based on column definitions -->\n        @for (col of columnDefinitions; track $index) {\n          <!-- Column header -->\n          <ng-container [matColumnDef]=\"col.key\">\n            <th *matHeaderCellDef mat-header-cell mat-sort-header>\n              {{ col.label }}\n            </th>\n\n            <!-- Column cell -->\n            <td\n              mat-cell\n              *matCellDef=\"let element; let i = index\"\n              [ngClass]=\"{ highlighted: highlightRowIndex === i }\"\n            >\n              <!-- Operations column with custom template -->\n              @if (col.key === \"op\") {\n                <div class=\"d-flex flex-row gap-1\">\n                  <ng-container\n                    [ngTemplateOutlet]=\"templateOp\"\n                    [ngTemplateOutletContext]=\"{ $implicit: element }\"\n                  ></ng-container>\n                </div>\n              }\n\n              <!-- Expandable row toggle button -->\n              @if (showExpand && col.key === \"expand\") {\n                <button\n                  mat-icon-button\n                  aria-label=\"expand row\"\n                  (click)=\"onExpand($event, element)\"\n                >\n                  @if (expandedElement === element) {\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                  } @else {\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                  }\n                </button>\n              }\n              @switch (col.type) {\n                @case (\"image\") {\n                  <img\n                    [src]=\"element[col.key]\"\n                    class=\"img-fluid img-thumbnail my-1\"\n                    width=\"50\"\n                    alt=\"\"\n                  />\n                }\n                @case (\"number\") {\n                  <div>{{ element[col.key] | number: \"1.2\" : locale }}</div>\n                }\n                @case (\"date\") {\n                  <div>{{ element[col.key] | date: \"dd.MM.yyyy\" }}</div>\n                }\n                @case (\"template\") {\n                  <ng-container\n                    *ngTemplateOutlet=\"\n                      col.templateOutlet;\n                      context: { $implicit: element }\n                    \"\n                  />\n                }\n                @case (\"custom\") {\n                  <!-- Dynamic component column -->\n                  @if (col.columnType === \"component\") {\n<!--                    <ng-container-->\n<!--                      [ngComponentOutlet]=\"col.body\"-->\n<!--                      [ngComponentOutletInjector]=\"createInjector(element)\"-->\n<!--                    />-->\n                  }\n                  @if (col.columnType === \"html\") {\n                    <!-- HTML content column -->\n                    <div [innerHTML]=\"col.body(element)\"></div>\n                  }\n                  @if (col.columnType === \"template\") {\n                    <ng-container\n                      *ngTemplateOutlet=\"\n                        col.body;\n                        context: { $implicit: element }\n                      \"\n                    />\n                  }\n                }\n\n                @default {\n                  <div>{{ element[col.key] }}</div>\n                }\n              }\n            </td>\n\n            <td *matFooterCellDef mat-footer-cell>\n              @if (!col.index) {\n                <div>Total</div>\n                <!-- col.index === 0 -->\n              }\n              @if (col.index && col.hasFooter) {\n                <div>{{ col.key | getTotal: this.dataSource.data }}</div>\n              }\n              <!-- col.index !== 0 -->\n            </td>\n          </ng-container>\n        }\n\n        <!-- Expanded Content Column -->\n        @if (showExpand) {\n          <ng-container matColumnDef=\"expandedDetail\">\n            <td\n              mat-cell\n              *matCellDef=\"let element\"\n              [attr.colspan]=\"visibleColumns.length\"\n            >\n              <div\n                class=\"m-0 p-0\"\n                [@detailExpand]=\"\n                  element === expandedElement ? 'expanded' : 'collapsed'\n                \"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"expandedDetail; context: { row: element }\"\n                ></ng-container>\n              </div>\n            </td>\n          </ng-container>\n        }\n\n        <!-- Rows -->\n        <tr\n          mat-header-row\n          *matHeaderRowDef=\"visibleColumns; sticky: true\"\n          class=\"small-header\"\n        ></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: visibleColumns\"\n          [class.example-expanded-row]=\"expandedElement === row\"\n          (click)=\"selectRow(row)\"\n          [style]=\"getRowColor(row) || {}\"\n        ></tr>\n        @if (showExpand) {\n          <tr\n            mat-row\n            *matRowDef=\"let row; columns: ['expandedDetail']\"\n            class=\"example-detail-row\"\n          ></tr>\n        }\n\n        <!-- No Data Row -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td\n            class=\"mat-cell text-center\"\n            [attr.colspan]=\"visibleColumns.length\"\n          >\n            Sin Registro\n          </td>\n        </tr>\n\n        <!-- Footer Row -->\n        @if (showFooter && dataSource.data.length > 0) {\n          <tr mat-footer-row *matFooterRowDef=\"visibleColumns\"></tr>\n        }\n      }\n    </table>\n  </div>\n\n  @if (enablePagination() && paginationConfig()) {\n    <mat-paginator\n      #paginator\n      [disabled]=\"isLoadingData()\"\n      (page)=\"handlePageEvent($event)\"\n      [length]=\"paginationConfig()?.totalRecords\"\n      [pageSize]=\"paginationConfig()?.pageSize\"\n      [pageSizeOptions]=\"paginationConfig()?.pageSizeOptions ?? []\"\n      [showFirstLastButtons]=\"true\"\n      [pageIndex]=\"paginationConfig()?.pageIndex\"\n      aria-label=\"Select page\"\n    >\n    </mat-paginator>\n  }\n</div>\n","import { Component, inject, input } from '@angular/core';\nimport {\n  MatChipEditedEvent, MatChipGrid, MatChipInput,\n  MatChipInputEvent,\n  MatChipRow,\n} from '@angular/material/chips';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatLabel } from '@angular/material/form-field';\nimport { MatHint } from '@angular/material/form-field';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\n\n@Component({\n  selector: 'lib-mat-input-chip',\n  imports: [MatFormField, MatLabel, MatChipRow, MatIcon, MatHint, MatChipGrid, MatChipInput],\n  templateUrl: './mat-input-chip.component.html',\n  styleUrl: './mat-input-chip.component.css',\n})\nexport class MatInputChipComponent {\n  chips = input.required<string[]>();\n  labelText = input.required<string>();\n  placelholder = input<string>('');\n  addOnBlur = true;\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\n\n  announcer = inject(LiveAnnouncer);\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our fruit\n    if (value) {\n      this.chips().push(value);\n    }\n\n    // Clear the input value\n    event.chipInput!.clear();\n  }\n\n  remove(value: string): void {\n    const index = this.chips().indexOf(value);\n\n    if (index >= 0) {\n      this.chips().splice(index, 1);\n\n      this.announcer.announce(`Removed ${value}`);\n    }\n  }\n\n  edit(inputRaw: string, event: MatChipEditedEvent) {\n    const value = event.value.trim();\n\n    // Remove fruit if it no longer has a name\n    if (!value) {\n      this.remove(inputRaw);\n      return;\n    }\n\n    // Edit existing fruit\n    const index = this.chips().indexOf(inputRaw);\n    if (index >= 0) {\n      this.chips()[index] = value.replace(/\\s+/g, '');\n    }\n  }\n}\n","<mat-form-field class=\"w-100\" appearance=\"outline\">\n  <mat-label>{{ labelText() }}</mat-label>\n  <mat-chip-grid #chipGrid aria-label=\"Enter fruits\">\n    @for (chip of chips(); track $index) {\n      <mat-chip-row\n        (removed)=\"remove(chip)\"\n        [editable]=\"true\"\n        (edited)=\"edit(chip, $event)\"\n        [aria-description]=\"'press enter to edit ' + chip\"\n      >\n        {{ chip }}\n        <button matChipRemove [attr.aria-label]=\"'remove ' + chip\">\n          <mat-icon>cancel</mat-icon>\n        </button>\n      </mat-chip-row>\n    }\n    <input\n      [placeholder]=\"placelholder()\"\n      [matChipInputFor]=\"chipGrid\"\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n      [matChipInputAddOnBlur]=\"addOnBlur\"\n      (matChipInputTokenEnd)=\"add($event)\"\n    />\n  </mat-chip-grid>\n  <mat-hint align=\"start\"\n    ><strong>Ingrese {{ labelText() }} y dale \"Enter\"</strong>\n  </mat-hint>\n</mat-form-field>\n","import { Component } from '@angular/core';\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\n\n@Component({\n  selector: 'acp-spinner',\n  imports: [MatProgressSpinner],\n  templateUrl: './spinner.component.html',\n  styleUrl: './spinner.component.css',\n})\nexport class SpinnerComponent {}\n","<mat-spinner></mat-spinner>\r\n","import { Injectable } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { SpinnerComponent } from '../components';\n@Injectable({\n  providedIn: 'root',\n})\nexport class OverlayService {\n  private overlayRef!: OverlayRef;\n\n  constructor(private overlay: Overlay) {}\n\n  showSpinner() {\n    if (!this.overlayRef) {\n      this.overlayRef = this.overlay.create({\n        hasBackdrop: true,\n        positionStrategy: this.overlay\n          .position()\n          .global()\n          .centerHorizontally()\n          .centerVertically(),\n      });\n\n      const spinnerPortal = new ComponentPortal(SpinnerComponent);\n      this.overlayRef.attach(spinnerPortal);\n    }\n  }\n\n  hideSpinner() {\n    if (this.overlayRef) {\n      this.overlayRef.detach();\n      this.overlayRef = null!;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\r\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\r\n\r\nexport interface SnackbarConfig extends MatSnackBarConfig {\r\n  readonly defaultAction?: string;\r\n  readonly iconEnabled?: boolean;\r\n  readonly titleEnabled?: boolean;\r\n}\r\n\r\nexport const DEFAULT_SNACKBAR_CONFIG: SnackbarConfig = {\r\n  duration: 5000,\r\n  horizontalPosition: 'center',\r\n  verticalPosition: 'bottom',\r\n  panelClass: [],\r\n  defaultAction: 'Close',\r\n  iconEnabled: true,\r\n  titleEnabled: true,\r\n};\r\n\r\nexport const SNACKBAR_CONFIG = new InjectionToken<SnackbarConfig>(\r\n  'acontplus-snackbar-config',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => DEFAULT_SNACKBAR_CONFIG,\r\n  }\r\n);\r\n","import { inject, Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SNACKBAR_CONFIG } from './snackbar.config';\nimport { SNACKBAR_DURATIONS } from '../../constants';\nimport { NotificationCallProps, SnackbarProps } from '../../models';\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  private readonly snackBar = inject(MatSnackBar);\n  private readonly config = inject(SNACKBAR_CONFIG);\n\n  /**\n   * Display a snackbar with specific type and configuration\n   */\n  show(props: SnackbarProps): void {\n    const {\n      type,\n      message,\n      title,\n      action = this.config.defaultAction,\n      config: userConfig = {},\n    } = props;\n\n    const typeClass = `acontplus-snackbar-${type}`;\n    const panelClasses = this.buildPanelClasses(\n      typeClass,\n      userConfig.panelClass,\n    );\n\n    const finalConfig = {\n      ...this.config,\n      ...userConfig,\n      panelClass: panelClasses,\n    };\n\n    const displayMessage = this.buildMessage(message, title);\n    this.snackBar.open(displayMessage, action, finalConfig);\n  }\n\n  /**\n   * Quick success notification\n   */\n  success(props: NotificationCallProps): void {\n    this.show({\n      type: 'success',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.MEDIUM,\n        ...props.config,\n      },\n    });\n  }\n\n  /**\n   * Quick error notification with longer duration\n   */\n  error(props: NotificationCallProps): void {\n    this.show({\n      type: 'error',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.LONG,\n        ...props.config,\n      },\n    });\n  }\n\n  /**\n   * Quick warning notification\n   */\n  warning(props: NotificationCallProps): void {\n    this.show({\n      type: 'warning',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.MEDIUM,\n        ...props.config,\n      },\n    });\n  }\n\n  /**\n   * Quick info notification\n   */\n  info(props: NotificationCallProps): void {\n    this.show({\n      type: 'info',\n      ...props,\n      config: {\n        duration: SNACKBAR_DURATIONS.MEDIUM,\n        ...props.config,\n      },\n    });\n  }\n\n  private buildPanelClasses(\n    typeClass: string,\n    userClasses?: string | string[],\n  ): string[] {\n    const classes = ['acontplus-snackbar', typeClass];\n\n    if (userClasses) {\n      const normalizedClasses = Array.isArray(userClasses)\n        ? userClasses\n        : [userClasses];\n      classes.push(...normalizedClasses);\n    }\n\n    return classes;\n  }\n\n  private buildMessage(message: string, title?: string): string {\n    if (!this.config.titleEnabled || !title) {\n      return message;\n    }\n    return `${title}: ${message}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private readonly _darkMode = new BehaviorSubject<boolean>(false);\n  isDarkMode$ = this._darkMode.asObservable();\n\n  loadMode() {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      this._darkMode.next(savedTheme === 'dark');\n      this.applyTheme(savedTheme === 'dark');\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia(\n        '(prefers-color-scheme: dark)',\n      ).matches;\n      this._darkMode.next(prefersDark);\n      this.applyTheme(prefersDark);\n    }\n  }\n\n  toggleDarkMode(): void {\n    const newValue = !this._darkMode.value;\n    this._darkMode.next(newValue);\n    this.applyTheme(newValue);\n    localStorage.setItem('theme', newValue ? 'dark' : 'light');\n  }\n\n  private applyTheme(isDark: boolean): void {\n    if (isDark) {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  }\n}\n","import { Component, inject, signal } from '@angular/core';\nimport { SnackbarService } from '../../../services';\nimport { NotificationDemo, SnackbarType } from '../../../models';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatButton } from '@angular/material/button';\nimport { MatFormField, MatInput, MatLabel } from '@angular/material/input';\nimport { FormsModule } from '@angular/forms';\nimport { MatOption } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { SNACKBAR_MESSAGES } from '../../../constants';\n\n@Component({\n  selector: 'acp-snackbar-notification',\n  imports: [\n    MatCardModule,\n    MatButton,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    FormsModule,\n    MatOption,\n    MatSelect,\n    MatIcon,\n  ],\n  templateUrl: './snackbar-notification.component.html',\n  styleUrl: './snackbar-notification.component.css',\n})\nexport class SnackbarNotificationComponent {\n  private readonly snackbarService = inject(SnackbarService);\n\n  protected readonly customNotification = signal<NotificationDemo>({\n    type: 'info',\n    message: '',\n    title: '',\n    duration: 5000,\n  });\n\n  protected readonly quickMessages = {\n    success: SNACKBAR_MESSAGES.SUCCESS.SAVE,\n    info: SNACKBAR_MESSAGES.INFO.LOADING,\n    warning: SNACKBAR_MESSAGES.WARNING.UNSAVED_CHANGES,\n    error: SNACKBAR_MESSAGES.ERROR.NETWORK,\n  } as const;\n\n  protected showQuickNotification(type: SnackbarType): void {\n    this.snackbarService[type]({\n      message: this.quickMessages[type],\n      title: type.charAt(0).toUpperCase() + type.slice(1),\n    });\n  }\n\n  protected showCustomNotification(): void {\n    if (!this.isFormValid()) return;\n\n    const notification = this.customNotification();\n    this.snackbarService.show({\n      type: notification.type,\n      message: notification.message,\n      title: notification.title || undefined,\n      config: { duration: notification.duration || 5000 },\n    });\n  }\n\n  protected isFormValid(): boolean {\n    return !!this.customNotification().message.trim();\n  }\n\n  protected resetForm(): void {\n    this.customNotification.set({\n      type: 'info',\n      message: '',\n      title: '',\n      duration: 5000,\n    });\n  }\n}\n","<div class=\"snackbar-demo-container\">\n  <!-- Quick Action Buttons -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>notifications</mat-icon>\n        Quick Notifications\n      </mat-card-title>\n      <mat-card-subtitle>\n        Test common notification scenarios\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <div class=\"quick-buttons\">\n        <button\n          mat-raised-button\n          color=\"primary\"\n          (click)=\"showQuickNotification('success')\"\n          class=\"notification-btn success-btn\"\n        >\n          <mat-icon>check_circle</mat-icon>\n          Success\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"accent\"\n          (click)=\"showQuickNotification('info')\"\n          class=\"notification-btn info-btn\"\n        >\n          <mat-icon>info</mat-icon>\n          Info\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('warning')\"\n          class=\"notification-btn warning-btn\"\n        >\n          <mat-icon>warning</mat-icon>\n          Warning\n        </button>\n\n        <button\n          mat-raised-button\n          color=\"warn\"\n          (click)=\"showQuickNotification('error')\"\n          class=\"notification-btn error-btn\"\n        >\n          <mat-icon>error</mat-icon>\n          Error\n        </button>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Custom Notification Builder -->\n  <mat-card class=\"demo-card\">\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>build</mat-icon>\n        Custom Notification Builder\n      </mat-card-title>\n      <mat-card-subtitle>\n        Create and test custom notifications\n      </mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <form class=\"notification-form\" (ngSubmit)=\"showCustomNotification()\">\n        <div class=\"form-row\">\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Type</mat-label>\n            <mat-select\n              [(ngModel)]=\"customNotification().type\"\n              name=\"type\"\n              required\n            >\n              <mat-option value=\"success\">Success</mat-option>\n              <mat-option value=\"info\">Info</mat-option>\n              <mat-option value=\"warning\">Warning</mat-option>\n              <mat-option value=\"error\">Error</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Duration (ms)</mat-label>\n            <input\n              matInput\n              type=\"number\"\n              [(ngModel)]=\"customNotification().duration\"\n              name=\"duration\"\n              placeholder=\"5000\"\n              min=\"1000\"\n              max=\"30000\"\n            />\n          </mat-form-field>\n        </div>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Title (optional)</mat-label>\n          <input\n            matInput\n            [(ngModel)]=\"customNotification().title\"\n            name=\"title\"\n            placeholder=\"Notification title\"\n          />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Message</mat-label>\n          <textarea\n            matInput\n            [(ngModel)]=\"customNotification().message\"\n            name=\"message\"\n            placeholder=\"Your notification message...\"\n            rows=\"3\"\n            required\n          ></textarea>\n        </mat-form-field>\n\n        <div class=\"form-actions\">\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"!isFormValid()\"\n            class=\"send-btn\"\n          >\n            <mat-icon>send</mat-icon>\n            Send Notification\n          </button>\n\n          <button\n            mat-button\n            type=\"button\"\n            (click)=\"resetForm()\"\n            class=\"reset-btn\"\n          >\n            <mat-icon>refresh</mat-icon>\n            Reset\n          </button>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n\n  <!-- Usage Examples -->\n  <!--  <mat-card class=\"demo-card\">-->\n  <!--    <mat-card-header>-->\n  <!--      <mat-card-title>-->\n  <!--        <mat-icon>code</mat-icon>-->\n  <!--        Usage Examples-->\n  <!--      </mat-card-title>-->\n  <!--    </mat-card-header>-->\n\n  <!--    <mat-card-content>-->\n  <!--      <div class=\"code-examples\">-->\n  <!--        <h4>Basic Usage:</h4>-->\n  <!--        <pre><code>{{ basicUsageExample() }}</code></pre>-->\n\n  <!--        <h4>With Configuration:</h4>-->\n  <!--        <pre><code>{{ advancedUsageExample() }}</code></pre>-->\n  <!--      </div>-->\n  <!--    </mat-card-content>-->\n  <!--  </mat-card>-->\n</div>\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ThemeService } from '../../services';\nimport { MatIconButton } from '@angular/material/button';\nimport { AsyncPipe } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\n\n@Component({\n  selector: 'acp-theme-toggle',\n  imports: [MatIconButton, MatIcon, AsyncPipe],\n  templateUrl: './theme-toggle.component.html',\n  styleUrl: './theme-toggle.component.css',\n})\nexport class ThemeToggleComponent {\n  darkMode$: Observable<boolean>;\n\n  constructor(private themeService: ThemeService) {\n    this.darkMode$ = this.themeService.isDarkMode$;\n  }\n  toggleDarkMode(): void {\n    this.themeService.toggleDarkMode();\n  }\n}\n","<button\n  mat-icon-button\n  (click)=\"toggleDarkMode()\"\n  title=\"{{ (darkMode$ | async) ? 'Modo Día' : 'Modo Noche' }}\"\n>\n  <mat-icon>{{ (darkMode$ | async) ? \"light_mode\" : \"dark_mode\" }}</mat-icon>\n</button>\n","import {\n  HttpContext,\n  HttpContextToken,\n  HttpInterceptorFn,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\nimport { inject } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { OverlayService } from '../services';\n/**\n * Token to determine if a request should show spinner\n * Default is true (show spinner for all requests)\n */\nconst SHOW_SPINNER = new HttpContextToken<boolean>(() => true);\n\n/**\n * Helper function to disable spinner for specific requests\n * @returns HttpContext with spinner disabled\n */\nexport function withoutSpinner() {\n  return new HttpContext().set(SHOW_SPINNER, false);\n}\n\n/**\n * Service to track active HTTP requests\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveRequestsTracker {\n  private requests: HttpRequest<any>[] = [];\n\n  get count(): number {\n    return this.requests.length;\n  }\n\n  add(request: HttpRequest<any>): void {\n    this.requests.push(request);\n  }\n\n  remove(request: HttpRequest<any>): void {\n    const index = this.requests.indexOf(request);\n    if (index >= 0) {\n      this.requests.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Interceptor that shows/hides a loading spinner based on active HTTP requests\n */\nexport const spinnerInterceptor: HttpInterceptorFn = (req, next) => {\n  // Track active requests requiring spinner\n  const activeRequests = inject(ActiveRequestsTracker);\n  const overlayService = inject(OverlayService);\n\n  // Skip spinner if disabled for this request\n  if (!req.context.get(SHOW_SPINNER)) {\n    return next(req);\n  }\n\n  // Add request to tracking\n  activeRequests.add(req);\n\n  // Show spinner if this is the first active request\n  if (activeRequests.count === 1) {\n    overlayService.showSpinner();\n  }\n\n  return next(req).pipe(\n    finalize(() => {\n      // Remove request and hide spinner if no more active requests\n      activeRequests.remove(req);\n      if (activeRequests.count === 0) {\n        overlayService.hideSpinner();\n      }\n    }),\n  );\n};\n","export class FieldDefinition {\n  // <T>\n  value?: any; // T\n  valueLabel?: any;\n  defaultValue?: any;\n  defaultValueLabel?: any;\n  key: string;\n  label: string;\n  dateRangeConfig?: DateRangeConfig;\n  isDefaultSearchField?: boolean;\n  required?: boolean;\n  disabled?: boolean;\n  order?: number;\n  icon?: string;\n  controlType?: ControlType = 'textbox';\n  type?: FieldType = 'string';\n  editor?: 'numeric' | 'boolean' | ''; // this attribut is for Kendo-Grid\n  options?: any[]; // { label: string, value: string | number }[]\n  valueOptions?: string[];\n  valuePrimitive?: boolean; // for kendo dropdown\n  textField?: string; // for kendo dropdown\n  valueField?: string; // for kendo dropdown\n  errorMessage?: string;\n  width?: string;\n  valueChangeCallback?: Function;\n  columnType?: ColumnType;\n  body?: any;\n\n  constructor(\n    options: {\n      value?: any; // T\n      valueLabel?: any;\n      defaultValue?: any;\n      defaultValueLabel?: any;\n      key?: string;\n      label?: string;\n      dateRangeConfig?: DateRangeConfig;\n      isDefaultSearchField?: boolean;\n      required?: boolean;\n      disabled?: boolean;\n      order?: number;\n      icon?: string;\n      controlType?: ControlType;\n      type?: FieldType;\n      editor?: 'numeric' | 'boolean'; // this attribut is for Kendo-Grid\n      options?: any[]; // { label: string, value: string | number }[]\n      valueOptions?: string[];\n      errorMessage?: string;\n      width?: string;\n      valueChangeCallback?: Function;\n    } = {},\n  ) {\n    this.value = options.value;\n    this.valueLabel = options.valueLabel;\n    this.defaultValue = options.defaultValue;\n    this.defaultValueLabel = options.defaultValueLabel;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.dateRangeConfig = options.dateRangeConfig;\n    this.isDefaultSearchField = options.isDefaultSearchField;\n    this.required = !!options.required;\n    this.disabled = options.disabled;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.icon = options.icon;\n    this.controlType = options.controlType || 'textbox';\n    this.type = options.type || 'string';\n    this.editor = options.editor || ''; // this attribut is for Kendo-Grid\n    this.options = options.options || [];\n    this.valueOptions = options.valueOptions || [];\n    this.errorMessage = options.errorMessage || '';\n    this.width = options.width;\n    this.valueChangeCallback = options.valueChangeCallback || undefined;\n  }\n}\n\nexport interface DateRangeConfig {\n  startDate: FieldDefinition;\n  endDate: FieldDefinition;\n}\n\nexport declare type ControlType =\n  | 'textbox'\n  | 'ktextbox'\n  | 'combobox'\n  | 'textboxNum'\n  | 'dropdown'\n  | 'dropdownlist'\n  | 'multiselect'\n  | 'autocomplete'\n  | 'checkbox'\n  | 'radiobutton'\n  | 'inquiryInDialog'\n  | 'timepicker'\n  | 'datepicker'\n  | 'daterange'\n  | 'textarea'\n  | 'slideToggle'\n  | 'slider'\n  | 'switch'\n  | 'buttonToggleGroup'; // checkboxGroup colorpicker button\n\nexport declare type FieldType =\n  | 'number'\n  | 'string'\n  | 'boolean'\n  | 'date'\n  | 'month'\n  | 'email'\n  | 'password'\n  | 'tel'\n  | 'hidden'\n  | 'image'\n  | 'url'\n  | 'week'\n  | 'search'\n  | 'reset'\n  | 'template'\n  | 'custom';\n\nexport declare type ColumnType = 'text' | 'component' | 'html' | 'template';\n","import { FieldDefinition } from './field-definition.model';\n\nexport class ColumnDefinition extends FieldDefinition {\n  index?: number; // if the list of columns will be displayed in material edit-grid (angular material grid), index must be given\n  format?: any; // it could be: { style: 'currency', currency: 'EUR' }, { date: 'short' }\n  hasFooter?: boolean;\n  hideInOverlay?: boolean;\n\n  // optionsAttribut is used in stock-receipt maintenance: StockReceiptItem.Unit has options for StockReceiptItem.Birimi\n  optionsAttribut?: string; // name of the attribut that has the options list for dropdown\n  templateOutlet?: any;\n}\n","export class TableCellIndex {\r\n    row: number;\r\n    column: number;\r\n\r\n    constructor(row: number, column: number) {\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n}\r\n","export class Pagination {\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  maxSize: number;\r\n  totalRecords: number;\r\n  pageSizeOptions: number[];\r\n\r\n  /**\r\n   * @param pageIndex Current page index (0-based for MatPagination compatibility)\r\n   * @param pageSize Number of records per page\r\n   * @param maxSize Maximum number of pages displayed in the pagination control\r\n   * @param totalRecords Total number of records\r\n   * @param pageSizeOptions Available page size options\r\n   */\r\n  constructor(\r\n    pageIndex: number = 0, // MatPagination starts at 0\r\n    pageSize: number = 25,\r\n    maxSize: number = 5,\r\n    totalRecords: number = 0,\r\n    pageSizeOptions: number[] = [25, 50, 75, 100],\r\n  ) {\r\n    this.pageIndex = pageIndex;\r\n    this.pageSize = pageSize;\r\n    this.maxSize = maxSize;\r\n    this.totalRecords = totalRecords;\r\n    this.pageSizeOptions = pageSizeOptions;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total number of pages.\r\n   */\r\n  getTotalPages(): number {\r\n    return Math.ceil(this.totalRecords / this.pageSize);\r\n  }\r\n\r\n  /**\r\n   * Updates the page size and resets the page index to the first page.\r\n   * @param newPageSize The new page size\r\n   */\r\n  updatePageSize(newPageSize: number): void {\r\n    if (this.pageSizeOptions.includes(newPageSize)) {\r\n      this.pageSize = newPageSize;\r\n      this.pageIndex = 0; // Reset to first page\r\n    } else {\r\n      throw new Error(`Invalid page size: ${newPageSize}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates pagination data based on paginator event.\r\n   * @param event MatPaginator event\r\n   */\r\n  updateFromPaginatorEvent(event: any): void {\r\n    this.pageIndex = event.pageIndex;\r\n    this.pageSize = event.pageSize;\r\n  }\r\n}\r\n","/*\n * Public API Surface of acontplus-ui-components\n */\n\nexport * from './lib/constants';\nexport * from './lib/components';\nexport * from './lib/inputs';\nexport * from './lib/interceptors';\nexport * from './lib/models';\nexport * from './lib/pipes';\nexport * from './lib/services';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","MatFormField","MatLabel","i2","i1.ThemeService"],"mappings":"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"}