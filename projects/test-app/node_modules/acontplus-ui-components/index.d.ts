import * as _angular_material_snack_bar from '@angular/material/snack-bar';
import { MatSnackBarConfig } from '@angular/material/snack-bar';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import * as rxjs from 'rxjs';
import { Observable } from 'rxjs';
import { HttpContext, HttpRequest, HttpInterceptorFn } from '@angular/common/http';
import { Overlay } from '@angular/cdk/overlay';

type SnackbarType = 'success' | 'warning' | 'info' | 'error';
interface SnackbarProps {
    readonly type: SnackbarType;
    readonly message: string;
    readonly title?: string;
    readonly action?: string;
    readonly config?: Partial<_angular_material_snack_bar.MatSnackBarConfig>;
}
interface NotificationCallProps {
    readonly message: string;
    readonly title?: string;
    readonly config?: Partial<_angular_material_snack_bar.MatSnackBarConfig>;
}
interface NotificationDemo {
    type: SnackbarType;
    message: string;
    title?: string;
    duration?: number;
}

declare class FieldDefinition {
    value?: any;
    valueLabel?: any;
    defaultValue?: any;
    defaultValueLabel?: any;
    key: string;
    label: string;
    dateRangeConfig?: DateRangeConfig;
    isDefaultSearchField?: boolean;
    required?: boolean;
    disabled?: boolean;
    order?: number;
    icon?: string;
    controlType?: ControlType;
    type?: FieldType;
    editor?: 'numeric' | 'boolean' | '';
    options?: any[];
    valueOptions?: string[];
    valuePrimitive?: boolean;
    textField?: string;
    valueField?: string;
    errorMessage?: string;
    width?: string;
    valueChangeCallback?: Function;
    constructor(options?: {
        value?: any;
        valueLabel?: any;
        defaultValue?: any;
        defaultValueLabel?: any;
        key?: string;
        label?: string;
        dateRangeConfig?: DateRangeConfig;
        isDefaultSearchField?: boolean;
        required?: boolean;
        disabled?: boolean;
        order?: number;
        icon?: string;
        controlType?: ControlType;
        type?: FieldType;
        editor?: 'numeric' | 'boolean';
        options?: any[];
        valueOptions?: string[];
        errorMessage?: string;
        width?: string;
        valueChangeCallback?: Function;
    });
}
interface DateRangeConfig {
    startDate: FieldDefinition;
    endDate: FieldDefinition;
}
declare type ControlType = 'textbox' | 'ktextbox' | 'combobox' | 'textboxNum' | 'dropdown' | 'dropdownlist' | 'multiselect' | 'autocomplete' | 'checkbox' | 'radiobutton' | 'inquiryInDialog' | 'timepicker' | 'datepicker' | 'daterange' | 'textarea' | 'slideToggle' | 'slider' | 'switch' | 'buttonToggleGroup';
declare type FieldType = 'number' | 'string' | 'boolean' | 'date' | 'month' | 'email' | 'password' | 'tel' | 'hidden' | 'image' | 'url' | 'week' | 'search' | 'reset';

declare class ColumnDefinition extends FieldDefinition {
    index?: number;
    format?: any;
    hasFooter?: boolean;
    hideInOverlay?: boolean;
    optionsAttribut?: string;
}

interface OptionSearchConfig<T> {
    displayedColumns?: string[];
    displayColumnDefs?: ColumnDefinition[];
    close?: boolean;
}

declare class TableCellIndex {
    row: number;
    column: number;
    constructor(row: number, column: number);
}

declare const SNACKBAR_MESSAGES: {
    readonly SUCCESS: {
        readonly SAVE: "Data saved successfully";
        readonly DELETE: "Item deleted successfully";
        readonly UPDATE: "Data updated successfully";
        readonly UPLOAD: "File uploaded successfully";
    };
    readonly ERROR: {
        readonly SAVE: "Failed to save data";
        readonly DELETE: "Failed to delete item";
        readonly UPDATE: "Failed to update data";
        readonly UPLOAD: "Failed to upload file";
        readonly NETWORK: "Network error occurred";
        readonly UNKNOWN: "An unexpected error occurred";
    };
    readonly WARNING: {
        readonly UNSAVED_CHANGES: "You have unsaved changes";
        readonly SESSION_EXPIRING: "Your session is about to expire";
        readonly STORAGE_FULL: "Storage is running low";
    };
    readonly INFO: {
        readonly LOADING: "Loading data...";
        readonly PROCESSING: "Processing request...";
        readonly MAINTENANCE: "System maintenance scheduled";
    };
};
declare const SNACKBAR_DURATIONS: {
    readonly SHORT: 3000;
    readonly MEDIUM: 5000;
    readonly LONG: 8000;
    readonly PERSISTENT: 0;
};
declare const SNACKBAR_ICONS: Record<SnackbarType, string>;

declare class SpinnerComponent {
    static ɵfac: i0.ɵɵFactoryDeclaration<SpinnerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SpinnerComponent, "apu-spinner", never, {}, {}, never, never, true, never>;
}

declare class SnackbarNotificationComponent {
    private readonly snackbarService;
    protected readonly customNotification: i0.WritableSignal<NotificationDemo>;
    protected readonly quickMessages: {
        readonly success: "Data saved successfully";
        readonly info: "Loading data...";
        readonly warning: "You have unsaved changes";
        readonly error: "Network error occurred";
    };
    protected showQuickNotification(type: SnackbarType): void;
    protected showCustomNotification(): void;
    protected isFormValid(): boolean;
    protected resetForm(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SnackbarNotificationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SnackbarNotificationComponent, "apu-snackbar-notification", never, {}, {}, never, never, true, never>;
}

declare class OverlayService {
    private overlay;
    private overlayRef;
    constructor(overlay: Overlay);
    showSpinner(): void;
    hideSpinner(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<OverlayService>;
}

interface SnackbarConfig extends MatSnackBarConfig {
    readonly defaultAction?: string;
    readonly iconEnabled?: boolean;
    readonly titleEnabled?: boolean;
}
declare const DEFAULT_SNACKBAR_CONFIG: SnackbarConfig;
declare const SNACKBAR_CONFIG: InjectionToken<SnackbarConfig>;

declare class SnackbarService {
    private readonly snackBar;
    private readonly config;
    /**
     * Display a snackbar with specific type and configuration
     */
    show(props: SnackbarProps): void;
    /**
     * Quick success notification
     */
    success(props: NotificationCallProps): void;
    /**
     * Quick error notification with longer duration
     */
    error(props: NotificationCallProps): void;
    /**
     * Quick warning notification
     */
    warning(props: NotificationCallProps): void;
    /**
     * Quick info notification
     */
    info(props: NotificationCallProps): void;
    private buildPanelClasses;
    private buildMessage;
    static ɵfac: i0.ɵɵFactoryDeclaration<SnackbarService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SnackbarService>;
}

declare class ThemeService {
    private readonly _darkMode;
    isDarkMode$: rxjs.Observable<boolean>;
    loadMode(): void;
    toggleDarkMode(): void;
    private applyTheme;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThemeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ThemeService>;
}

declare class ThemeToggleComponent {
    private themeService;
    darkMode$: Observable<boolean>;
    constructor(themeService: ThemeService);
    toggleDarkMode(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThemeToggleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThemeToggleComponent, "apu-theme-toggle", never, {}, {}, never, never, true, never>;
}

/**
 * Helper function to disable spinner for specific requests
 * @returns HttpContext with spinner disabled
 */
declare function withoutSpinner(): HttpContext;
/**
 * Service to track active HTTP requests
 */
declare class ActiveRequestsTracker {
    private requests;
    get count(): number;
    add(request: HttpRequest<any>): void;
    remove(request: HttpRequest<any>): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActiveRequestsTracker, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ActiveRequestsTracker>;
}
/**
 * Interceptor that shows/hides a loading spinner based on active HTTP requests
 */
declare const spinnerInterceptor: HttpInterceptorFn;

export { ActiveRequestsTracker, ColumnDefinition, DEFAULT_SNACKBAR_CONFIG, FieldDefinition, OverlayService, SNACKBAR_CONFIG, SNACKBAR_DURATIONS, SNACKBAR_ICONS, SNACKBAR_MESSAGES, SnackbarNotificationComponent, SnackbarService, SpinnerComponent, TableCellIndex, ThemeService, ThemeToggleComponent, spinnerInterceptor, withoutSpinner };
export type { ControlType, DateRangeConfig, FieldType, NotificationCallProps, NotificationDemo, OptionSearchConfig, SnackbarConfig, SnackbarProps, SnackbarType };
